/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// PermissionsRevokePost200ResponseDataInner - struct for PermissionsRevokePost200ResponseDataInner
type PermissionsRevokePost200ResponseDataInner struct {
	PermissionsListObjectsPost200ResponseDataInnerOneOf *PermissionsListObjectsPost200ResponseDataInnerOneOf
	PermissionsRevokePost200ResponseDataInnerOneOf *PermissionsRevokePost200ResponseDataInnerOneOf
	PermissionsRevokePost200ResponseDataInnerOneOf1 *PermissionsRevokePost200ResponseDataInnerOneOf1
}

// PermissionsListObjectsPost200ResponseDataInnerOneOfAsPermissionsRevokePost200ResponseDataInner is a convenience function that returns PermissionsListObjectsPost200ResponseDataInnerOneOf wrapped in PermissionsRevokePost200ResponseDataInner
func PermissionsListObjectsPost200ResponseDataInnerOneOfAsPermissionsRevokePost200ResponseDataInner(v *PermissionsListObjectsPost200ResponseDataInnerOneOf) PermissionsRevokePost200ResponseDataInner {
	return PermissionsRevokePost200ResponseDataInner{
		PermissionsListObjectsPost200ResponseDataInnerOneOf: v,
	}
}

// PermissionsRevokePost200ResponseDataInnerOneOfAsPermissionsRevokePost200ResponseDataInner is a convenience function that returns PermissionsRevokePost200ResponseDataInnerOneOf wrapped in PermissionsRevokePost200ResponseDataInner
func PermissionsRevokePost200ResponseDataInnerOneOfAsPermissionsRevokePost200ResponseDataInner(v *PermissionsRevokePost200ResponseDataInnerOneOf) PermissionsRevokePost200ResponseDataInner {
	return PermissionsRevokePost200ResponseDataInner{
		PermissionsRevokePost200ResponseDataInnerOneOf: v,
	}
}

// PermissionsRevokePost200ResponseDataInnerOneOf1AsPermissionsRevokePost200ResponseDataInner is a convenience function that returns PermissionsRevokePost200ResponseDataInnerOneOf1 wrapped in PermissionsRevokePost200ResponseDataInner
func PermissionsRevokePost200ResponseDataInnerOneOf1AsPermissionsRevokePost200ResponseDataInner(v *PermissionsRevokePost200ResponseDataInnerOneOf1) PermissionsRevokePost200ResponseDataInner {
	return PermissionsRevokePost200ResponseDataInner{
		PermissionsRevokePost200ResponseDataInnerOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PermissionsRevokePost200ResponseDataInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PermissionsListObjectsPost200ResponseDataInnerOneOf
	err = newStrictDecoder(data).Decode(&dst.PermissionsListObjectsPost200ResponseDataInnerOneOf)
	if err == nil {
		jsonPermissionsListObjectsPost200ResponseDataInnerOneOf, _ := json.Marshal(dst.PermissionsListObjectsPost200ResponseDataInnerOneOf)
		if string(jsonPermissionsListObjectsPost200ResponseDataInnerOneOf) == "{}" { // empty struct
			dst.PermissionsListObjectsPost200ResponseDataInnerOneOf = nil
		} else {
			match++
		}
	} else {
		dst.PermissionsListObjectsPost200ResponseDataInnerOneOf = nil
	}

	// try to unmarshal data into PermissionsRevokePost200ResponseDataInnerOneOf
	err = newStrictDecoder(data).Decode(&dst.PermissionsRevokePost200ResponseDataInnerOneOf)
	if err == nil {
		jsonPermissionsRevokePost200ResponseDataInnerOneOf, _ := json.Marshal(dst.PermissionsRevokePost200ResponseDataInnerOneOf)
		if string(jsonPermissionsRevokePost200ResponseDataInnerOneOf) == "{}" { // empty struct
			dst.PermissionsRevokePost200ResponseDataInnerOneOf = nil
		} else {
			match++
		}
	} else {
		dst.PermissionsRevokePost200ResponseDataInnerOneOf = nil
	}

	// try to unmarshal data into PermissionsRevokePost200ResponseDataInnerOneOf1
	err = newStrictDecoder(data).Decode(&dst.PermissionsRevokePost200ResponseDataInnerOneOf1)
	if err == nil {
		jsonPermissionsRevokePost200ResponseDataInnerOneOf1, _ := json.Marshal(dst.PermissionsRevokePost200ResponseDataInnerOneOf1)
		if string(jsonPermissionsRevokePost200ResponseDataInnerOneOf1) == "{}" { // empty struct
			dst.PermissionsRevokePost200ResponseDataInnerOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.PermissionsRevokePost200ResponseDataInnerOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PermissionsListObjectsPost200ResponseDataInnerOneOf = nil
		dst.PermissionsRevokePost200ResponseDataInnerOneOf = nil
		dst.PermissionsRevokePost200ResponseDataInnerOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PermissionsRevokePost200ResponseDataInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PermissionsRevokePost200ResponseDataInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PermissionsRevokePost200ResponseDataInner) MarshalJSON() ([]byte, error) {
	if src.PermissionsListObjectsPost200ResponseDataInnerOneOf != nil {
		return json.Marshal(&src.PermissionsListObjectsPost200ResponseDataInnerOneOf)
	}

	if src.PermissionsRevokePost200ResponseDataInnerOneOf != nil {
		return json.Marshal(&src.PermissionsRevokePost200ResponseDataInnerOneOf)
	}

	if src.PermissionsRevokePost200ResponseDataInnerOneOf1 != nil {
		return json.Marshal(&src.PermissionsRevokePost200ResponseDataInnerOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PermissionsRevokePost200ResponseDataInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PermissionsListObjectsPost200ResponseDataInnerOneOf != nil {
		return obj.PermissionsListObjectsPost200ResponseDataInnerOneOf
	}

	if obj.PermissionsRevokePost200ResponseDataInnerOneOf != nil {
		return obj.PermissionsRevokePost200ResponseDataInnerOneOf
	}

	if obj.PermissionsRevokePost200ResponseDataInnerOneOf1 != nil {
		return obj.PermissionsRevokePost200ResponseDataInnerOneOf1
	}

	// all schemas are nil
	return nil
}

type NullablePermissionsRevokePost200ResponseDataInner struct {
	value *PermissionsRevokePost200ResponseDataInner
	isSet bool
}

func (v NullablePermissionsRevokePost200ResponseDataInner) Get() *PermissionsRevokePost200ResponseDataInner {
	return v.value
}

func (v *NullablePermissionsRevokePost200ResponseDataInner) Set(val *PermissionsRevokePost200ResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionsRevokePost200ResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionsRevokePost200ResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionsRevokePost200ResponseDataInner(val *PermissionsRevokePost200ResponseDataInner) *NullablePermissionsRevokePost200ResponseDataInner {
	return &NullablePermissionsRevokePost200ResponseDataInner{value: val, isSet: true}
}

func (v NullablePermissionsRevokePost200ResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionsRevokePost200ResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// PermissionsRevokePost200ResponseDataInner struct for PermissionsRevokePost200ResponseDataInner
type PermissionsRevokePost200ResponseDataInner struct {
	PermissionsListObjectsPost200ResponseDataInnerOneOf *PermissionsListObjectsPost200ResponseDataInnerOneOf
	PermissionsRevokePost200ResponseDataInnerAnyOf *PermissionsRevokePost200ResponseDataInnerAnyOf
	PermissionsRevokePost200ResponseDataInnerAnyOf1 *PermissionsRevokePost200ResponseDataInnerAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *PermissionsRevokePost200ResponseDataInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into PermissionsListObjectsPost200ResponseDataInnerOneOf
	err = json.Unmarshal(data, &dst.PermissionsListObjectsPost200ResponseDataInnerOneOf);
	if err == nil {
		jsonPermissionsListObjectsPost200ResponseDataInnerOneOf, _ := json.Marshal(dst.PermissionsListObjectsPost200ResponseDataInnerOneOf)
		if string(jsonPermissionsListObjectsPost200ResponseDataInnerOneOf) == "{}" { // empty struct
			dst.PermissionsListObjectsPost200ResponseDataInnerOneOf = nil
		} else {
			return nil // data stored in dst.PermissionsListObjectsPost200ResponseDataInnerOneOf, return on the first match
		}
	} else {
		dst.PermissionsListObjectsPost200ResponseDataInnerOneOf = nil
	}

	// try to unmarshal JSON data into PermissionsRevokePost200ResponseDataInnerAnyOf
	err = json.Unmarshal(data, &dst.PermissionsRevokePost200ResponseDataInnerAnyOf);
	if err == nil {
		jsonPermissionsRevokePost200ResponseDataInnerAnyOf, _ := json.Marshal(dst.PermissionsRevokePost200ResponseDataInnerAnyOf)
		if string(jsonPermissionsRevokePost200ResponseDataInnerAnyOf) == "{}" { // empty struct
			dst.PermissionsRevokePost200ResponseDataInnerAnyOf = nil
		} else {
			return nil // data stored in dst.PermissionsRevokePost200ResponseDataInnerAnyOf, return on the first match
		}
	} else {
		dst.PermissionsRevokePost200ResponseDataInnerAnyOf = nil
	}

	// try to unmarshal JSON data into PermissionsRevokePost200ResponseDataInnerAnyOf1
	err = json.Unmarshal(data, &dst.PermissionsRevokePost200ResponseDataInnerAnyOf1);
	if err == nil {
		jsonPermissionsRevokePost200ResponseDataInnerAnyOf1, _ := json.Marshal(dst.PermissionsRevokePost200ResponseDataInnerAnyOf1)
		if string(jsonPermissionsRevokePost200ResponseDataInnerAnyOf1) == "{}" { // empty struct
			dst.PermissionsRevokePost200ResponseDataInnerAnyOf1 = nil
		} else {
			return nil // data stored in dst.PermissionsRevokePost200ResponseDataInnerAnyOf1, return on the first match
		}
	} else {
		dst.PermissionsRevokePost200ResponseDataInnerAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(PermissionsRevokePost200ResponseDataInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *PermissionsRevokePost200ResponseDataInner) MarshalJSON() ([]byte, error) {
	if src.PermissionsListObjectsPost200ResponseDataInnerOneOf != nil {
		return json.Marshal(&src.PermissionsListObjectsPost200ResponseDataInnerOneOf)
	}

	if src.PermissionsRevokePost200ResponseDataInnerAnyOf != nil {
		return json.Marshal(&src.PermissionsRevokePost200ResponseDataInnerAnyOf)
	}

	if src.PermissionsRevokePost200ResponseDataInnerAnyOf1 != nil {
		return json.Marshal(&src.PermissionsRevokePost200ResponseDataInnerAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}

type NullablePermissionsRevokePost200ResponseDataInner struct {
	value *PermissionsRevokePost200ResponseDataInner
	isSet bool
}

func (v NullablePermissionsRevokePost200ResponseDataInner) Get() *PermissionsRevokePost200ResponseDataInner {
	return v.value
}

func (v *NullablePermissionsRevokePost200ResponseDataInner) Set(val *PermissionsRevokePost200ResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionsRevokePost200ResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionsRevokePost200ResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionsRevokePost200ResponseDataInner(val *PermissionsRevokePost200ResponseDataInner) *NullablePermissionsRevokePost200ResponseDataInner {
	return &NullablePermissionsRevokePost200ResponseDataInner{value: val, isSet: true}
}

func (v NullablePermissionsRevokePost200ResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionsRevokePost200ResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SourceControlConfigGet200ResponseDataOneOfConfig - struct for SourceControlConfigGet200ResponseDataOneOfConfig
type SourceControlConfigGet200ResponseDataOneOfConfig struct {
	SourceControlConfigGet200ResponseDataOneOfConfigOneOf *SourceControlConfigGet200ResponseDataOneOfConfigOneOf
	SourceControlConfigGet200ResponseDataOneOfConfigOneOf1 *SourceControlConfigGet200ResponseDataOneOfConfigOneOf1
}

// SourceControlConfigGet200ResponseDataOneOfConfigOneOfAsSourceControlConfigGet200ResponseDataOneOfConfig is a convenience function that returns SourceControlConfigGet200ResponseDataOneOfConfigOneOf wrapped in SourceControlConfigGet200ResponseDataOneOfConfig
func SourceControlConfigGet200ResponseDataOneOfConfigOneOfAsSourceControlConfigGet200ResponseDataOneOfConfig(v *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) SourceControlConfigGet200ResponseDataOneOfConfig {
	return SourceControlConfigGet200ResponseDataOneOfConfig{
		SourceControlConfigGet200ResponseDataOneOfConfigOneOf: v,
	}
}

// SourceControlConfigGet200ResponseDataOneOfConfigOneOf1AsSourceControlConfigGet200ResponseDataOneOfConfig is a convenience function that returns SourceControlConfigGet200ResponseDataOneOfConfigOneOf1 wrapped in SourceControlConfigGet200ResponseDataOneOfConfig
func SourceControlConfigGet200ResponseDataOneOfConfigOneOf1AsSourceControlConfigGet200ResponseDataOneOfConfig(v *SourceControlConfigGet200ResponseDataOneOfConfigOneOf1) SourceControlConfigGet200ResponseDataOneOfConfig {
	return SourceControlConfigGet200ResponseDataOneOfConfig{
		SourceControlConfigGet200ResponseDataOneOfConfigOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SourceControlConfigGet200ResponseDataOneOfConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SourceControlConfigGet200ResponseDataOneOfConfigOneOf
	err = newStrictDecoder(data).Decode(&dst.SourceControlConfigGet200ResponseDataOneOfConfigOneOf)
	if err == nil {
		jsonSourceControlConfigGet200ResponseDataOneOfConfigOneOf, _ := json.Marshal(dst.SourceControlConfigGet200ResponseDataOneOfConfigOneOf)
		if string(jsonSourceControlConfigGet200ResponseDataOneOfConfigOneOf) == "{}" { // empty struct
			dst.SourceControlConfigGet200ResponseDataOneOfConfigOneOf = nil
		} else {
			match++
		}
	} else {
		dst.SourceControlConfigGet200ResponseDataOneOfConfigOneOf = nil
	}

	// try to unmarshal data into SourceControlConfigGet200ResponseDataOneOfConfigOneOf1
	err = newStrictDecoder(data).Decode(&dst.SourceControlConfigGet200ResponseDataOneOfConfigOneOf1)
	if err == nil {
		jsonSourceControlConfigGet200ResponseDataOneOfConfigOneOf1, _ := json.Marshal(dst.SourceControlConfigGet200ResponseDataOneOfConfigOneOf1)
		if string(jsonSourceControlConfigGet200ResponseDataOneOfConfigOneOf1) == "{}" { // empty struct
			dst.SourceControlConfigGet200ResponseDataOneOfConfigOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.SourceControlConfigGet200ResponseDataOneOfConfigOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SourceControlConfigGet200ResponseDataOneOfConfigOneOf = nil
		dst.SourceControlConfigGet200ResponseDataOneOfConfigOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SourceControlConfigGet200ResponseDataOneOfConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SourceControlConfigGet200ResponseDataOneOfConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SourceControlConfigGet200ResponseDataOneOfConfig) MarshalJSON() ([]byte, error) {
	if src.SourceControlConfigGet200ResponseDataOneOfConfigOneOf != nil {
		return json.Marshal(&src.SourceControlConfigGet200ResponseDataOneOfConfigOneOf)
	}

	if src.SourceControlConfigGet200ResponseDataOneOfConfigOneOf1 != nil {
		return json.Marshal(&src.SourceControlConfigGet200ResponseDataOneOfConfigOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SourceControlConfigGet200ResponseDataOneOfConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SourceControlConfigGet200ResponseDataOneOfConfigOneOf != nil {
		return obj.SourceControlConfigGet200ResponseDataOneOfConfigOneOf
	}

	if obj.SourceControlConfigGet200ResponseDataOneOfConfigOneOf1 != nil {
		return obj.SourceControlConfigGet200ResponseDataOneOfConfigOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableSourceControlConfigGet200ResponseDataOneOfConfig struct {
	value *SourceControlConfigGet200ResponseDataOneOfConfig
	isSet bool
}

func (v NullableSourceControlConfigGet200ResponseDataOneOfConfig) Get() *SourceControlConfigGet200ResponseDataOneOfConfig {
	return v.value
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOfConfig) Set(val *SourceControlConfigGet200ResponseDataOneOfConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceControlConfigGet200ResponseDataOneOfConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOfConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceControlConfigGet200ResponseDataOneOfConfig(val *SourceControlConfigGet200ResponseDataOneOfConfig) *NullableSourceControlConfigGet200ResponseDataOneOfConfig {
	return &NullableSourceControlConfigGet200ResponseDataOneOfConfig{value: val, isSet: true}
}

func (v NullableSourceControlConfigGet200ResponseDataOneOfConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOfConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



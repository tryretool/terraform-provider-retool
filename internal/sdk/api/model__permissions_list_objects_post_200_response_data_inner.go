/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// PermissionsListObjectsPost200ResponseDataInner - struct for PermissionsListObjectsPost200ResponseDataInner
type PermissionsListObjectsPost200ResponseDataInner struct {
	PermissionsListObjectsPost200ResponseDataInnerOneOf *PermissionsListObjectsPost200ResponseDataInnerOneOf
}

// PermissionsListObjectsPost200ResponseDataInnerOneOfAsPermissionsListObjectsPost200ResponseDataInner is a convenience function that returns PermissionsListObjectsPost200ResponseDataInnerOneOf wrapped in PermissionsListObjectsPost200ResponseDataInner
func PermissionsListObjectsPost200ResponseDataInnerOneOfAsPermissionsListObjectsPost200ResponseDataInner(v *PermissionsListObjectsPost200ResponseDataInnerOneOf) PermissionsListObjectsPost200ResponseDataInner {
	return PermissionsListObjectsPost200ResponseDataInner{
		PermissionsListObjectsPost200ResponseDataInnerOneOf: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PermissionsListObjectsPost200ResponseDataInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PermissionsListObjectsPost200ResponseDataInnerOneOf
	err = newStrictDecoder(data).Decode(&dst.PermissionsListObjectsPost200ResponseDataInnerOneOf)
	if err == nil {
		jsonPermissionsListObjectsPost200ResponseDataInnerOneOf, _ := json.Marshal(dst.PermissionsListObjectsPost200ResponseDataInnerOneOf)
		if string(jsonPermissionsListObjectsPost200ResponseDataInnerOneOf) == "{}" { // empty struct
			dst.PermissionsListObjectsPost200ResponseDataInnerOneOf = nil
		} else {
			match++
		}
	} else {
		dst.PermissionsListObjectsPost200ResponseDataInnerOneOf = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PermissionsListObjectsPost200ResponseDataInnerOneOf = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PermissionsListObjectsPost200ResponseDataInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PermissionsListObjectsPost200ResponseDataInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PermissionsListObjectsPost200ResponseDataInner) MarshalJSON() ([]byte, error) {
	if src.PermissionsListObjectsPost200ResponseDataInnerOneOf != nil {
		return json.Marshal(&src.PermissionsListObjectsPost200ResponseDataInnerOneOf)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PermissionsListObjectsPost200ResponseDataInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PermissionsListObjectsPost200ResponseDataInnerOneOf != nil {
		return obj.PermissionsListObjectsPost200ResponseDataInnerOneOf
	}

	// all schemas are nil
	return nil
}

type NullablePermissionsListObjectsPost200ResponseDataInner struct {
	value *PermissionsListObjectsPost200ResponseDataInner
	isSet bool
}

func (v NullablePermissionsListObjectsPost200ResponseDataInner) Get() *PermissionsListObjectsPost200ResponseDataInner {
	return v.value
}

func (v *NullablePermissionsListObjectsPost200ResponseDataInner) Set(val *PermissionsListObjectsPost200ResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionsListObjectsPost200ResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionsListObjectsPost200ResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionsListObjectsPost200ResponseDataInner(val *PermissionsListObjectsPost200ResponseDataInner) *NullablePermissionsListObjectsPost200ResponseDataInner {
	return &NullablePermissionsListObjectsPost200ResponseDataInner{value: val, isSet: true}
}

func (v NullablePermissionsListObjectsPost200ResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionsListObjectsPost200ResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



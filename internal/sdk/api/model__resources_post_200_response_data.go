/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ResourcesPost200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourcesPost200ResponseData{}

// ResourcesPost200ResponseData The created resource.
type ResourcesPost200ResponseData struct {
	Id ResourcesGet200ResponseDataInnerId `json:"id"`
	// The type of resource.
	Type string `json:"type"`
	DisplayName string `json:"display_name"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
}

type _ResourcesPost200ResponseData ResourcesPost200ResponseData

// NewResourcesPost200ResponseData instantiates a new ResourcesPost200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourcesPost200ResponseData(id ResourcesGet200ResponseDataInnerId, type_ string, displayName string, createdAt string, updatedAt string) *ResourcesPost200ResponseData {
	this := ResourcesPost200ResponseData{}
	this.Id = id
	this.Type = type_
	this.DisplayName = displayName
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewResourcesPost200ResponseDataWithDefaults instantiates a new ResourcesPost200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourcesPost200ResponseDataWithDefaults() *ResourcesPost200ResponseData {
	this := ResourcesPost200ResponseData{}
	return &this
}

// GetId returns the Id field value
func (o *ResourcesPost200ResponseData) GetId() ResourcesGet200ResponseDataInnerId {
	if o == nil {
		var ret ResourcesGet200ResponseDataInnerId
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResourcesPost200ResponseData) GetIdOk() (*ResourcesGet200ResponseDataInnerId, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResourcesPost200ResponseData) SetId(v ResourcesGet200ResponseDataInnerId) {
	o.Id = v
}

// GetType returns the Type field value
func (o *ResourcesPost200ResponseData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResourcesPost200ResponseData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResourcesPost200ResponseData) SetType(v string) {
	o.Type = v
}

// GetDisplayName returns the DisplayName field value
func (o *ResourcesPost200ResponseData) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *ResourcesPost200ResponseData) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ResourcesPost200ResponseData) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ResourcesPost200ResponseData) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ResourcesPost200ResponseData) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ResourcesPost200ResponseData) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ResourcesPost200ResponseData) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ResourcesPost200ResponseData) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ResourcesPost200ResponseData) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

func (o ResourcesPost200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourcesPost200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["display_name"] = o.DisplayName
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *ResourcesPost200ResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"display_name",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResourcesPost200ResponseData := _ResourcesPost200ResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResourcesPost200ResponseData)

	if err != nil {
		return err
	}

	*o = ResourcesPost200ResponseData(varResourcesPost200ResponseData)

	return err
}

type NullableResourcesPost200ResponseData struct {
	value *ResourcesPost200ResponseData
	isSet bool
}

func (v NullableResourcesPost200ResponseData) Get() *ResourcesPost200ResponseData {
	return v.value
}

func (v *NullableResourcesPost200ResponseData) Set(val *ResourcesPost200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableResourcesPost200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableResourcesPost200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourcesPost200ResponseData(val *ResourcesPost200ResponseData) *NullableResourcesPost200ResponseData {
	return &NullableResourcesPost200ResponseData{value: val, isSet: true}
}

func (v NullableResourcesPost200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourcesPost200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



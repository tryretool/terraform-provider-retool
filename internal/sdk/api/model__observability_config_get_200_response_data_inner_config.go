/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ObservabilityConfigGet200ResponseDataInnerConfig - Provider-specific configuration. For Datadog, provide an API key. For Sentry, provide a DSN.
type ObservabilityConfigGet200ResponseDataInnerConfig struct {
	ObservabilityConfigGet200ResponseDataInnerConfigOneOf *ObservabilityConfigGet200ResponseDataInnerConfigOneOf
	ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1
}

// ObservabilityConfigGet200ResponseDataInnerConfigOneOfAsObservabilityConfigGet200ResponseDataInnerConfig is a convenience function that returns ObservabilityConfigGet200ResponseDataInnerConfigOneOf wrapped in ObservabilityConfigGet200ResponseDataInnerConfig
func ObservabilityConfigGet200ResponseDataInnerConfigOneOfAsObservabilityConfigGet200ResponseDataInnerConfig(v *ObservabilityConfigGet200ResponseDataInnerConfigOneOf) ObservabilityConfigGet200ResponseDataInnerConfig {
	return ObservabilityConfigGet200ResponseDataInnerConfig{
		ObservabilityConfigGet200ResponseDataInnerConfigOneOf: v,
	}
}

// ObservabilityConfigGet200ResponseDataInnerConfigOneOf1AsObservabilityConfigGet200ResponseDataInnerConfig is a convenience function that returns ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 wrapped in ObservabilityConfigGet200ResponseDataInnerConfig
func ObservabilityConfigGet200ResponseDataInnerConfigOneOf1AsObservabilityConfigGet200ResponseDataInnerConfig(v *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1) ObservabilityConfigGet200ResponseDataInnerConfig {
	return ObservabilityConfigGet200ResponseDataInnerConfig{
		ObservabilityConfigGet200ResponseDataInnerConfigOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ObservabilityConfigGet200ResponseDataInnerConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ObservabilityConfigGet200ResponseDataInnerConfigOneOf
	err = newStrictDecoder(data).Decode(&dst.ObservabilityConfigGet200ResponseDataInnerConfigOneOf)
	if err == nil {
		jsonObservabilityConfigGet200ResponseDataInnerConfigOneOf, _ := json.Marshal(dst.ObservabilityConfigGet200ResponseDataInnerConfigOneOf)
		if string(jsonObservabilityConfigGet200ResponseDataInnerConfigOneOf) == "{}" { // empty struct
			dst.ObservabilityConfigGet200ResponseDataInnerConfigOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ObservabilityConfigGet200ResponseDataInnerConfigOneOf = nil
	}

	// try to unmarshal data into ObservabilityConfigGet200ResponseDataInnerConfigOneOf1
	err = newStrictDecoder(data).Decode(&dst.ObservabilityConfigGet200ResponseDataInnerConfigOneOf1)
	if err == nil {
		jsonObservabilityConfigGet200ResponseDataInnerConfigOneOf1, _ := json.Marshal(dst.ObservabilityConfigGet200ResponseDataInnerConfigOneOf1)
		if string(jsonObservabilityConfigGet200ResponseDataInnerConfigOneOf1) == "{}" { // empty struct
			dst.ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ObservabilityConfigGet200ResponseDataInnerConfigOneOf = nil
		dst.ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ObservabilityConfigGet200ResponseDataInnerConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ObservabilityConfigGet200ResponseDataInnerConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ObservabilityConfigGet200ResponseDataInnerConfig) MarshalJSON() ([]byte, error) {
	if src.ObservabilityConfigGet200ResponseDataInnerConfigOneOf != nil {
		return json.Marshal(&src.ObservabilityConfigGet200ResponseDataInnerConfigOneOf)
	}

	if src.ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 != nil {
		return json.Marshal(&src.ObservabilityConfigGet200ResponseDataInnerConfigOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ObservabilityConfigGet200ResponseDataInnerConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ObservabilityConfigGet200ResponseDataInnerConfigOneOf != nil {
		return obj.ObservabilityConfigGet200ResponseDataInnerConfigOneOf
	}

	if obj.ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 != nil {
		return obj.ObservabilityConfigGet200ResponseDataInnerConfigOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableObservabilityConfigGet200ResponseDataInnerConfig struct {
	value *ObservabilityConfigGet200ResponseDataInnerConfig
	isSet bool
}

func (v NullableObservabilityConfigGet200ResponseDataInnerConfig) Get() *ObservabilityConfigGet200ResponseDataInnerConfig {
	return v.value
}

func (v *NullableObservabilityConfigGet200ResponseDataInnerConfig) Set(val *ObservabilityConfigGet200ResponseDataInnerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableObservabilityConfigGet200ResponseDataInnerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableObservabilityConfigGet200ResponseDataInnerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservabilityConfigGet200ResponseDataInnerConfig(val *ObservabilityConfigGet200ResponseDataInnerConfig) *NullableObservabilityConfigGet200ResponseDataInnerConfig {
	return &NullableObservabilityConfigGet200ResponseDataInnerConfig{value: val, isSet: true}
}

func (v NullableObservabilityConfigGet200ResponseDataInnerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservabilityConfigGet200ResponseDataInnerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



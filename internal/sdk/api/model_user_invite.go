/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the UserInvite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserInvite{}

// UserInvite User Invite
type UserInvite struct {
	Id float32 `json:"id"`
	LegacyId float32 `json:"legacy_id"`
	InvitedBy string `json:"invited_by"`
	InvitedEmail string `json:"invited_email"`
	ExpiresAt string `json:"expires_at"`
	ClaimedBy NullableString `json:"claimed_by"`
	ClaimedAt NullableString `json:"claimed_at"`
	UserType NullableString `json:"user_type"`
	Metadata map[string]interface{} `json:"metadata"`
	CreatedAt string `json:"created_at"`
	InviteLink *string `json:"invite_link,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UserInvite UserInvite

// NewUserInvite instantiates a new UserInvite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInvite(id float32, legacyId float32, invitedBy string, invitedEmail string, expiresAt string, claimedBy NullableString, claimedAt NullableString, userType NullableString, metadata map[string]interface{}, createdAt string) *UserInvite {
	this := UserInvite{}
	this.Id = id
	this.LegacyId = legacyId
	this.InvitedBy = invitedBy
	this.InvitedEmail = invitedEmail
	this.ExpiresAt = expiresAt
	this.ClaimedBy = claimedBy
	this.ClaimedAt = claimedAt
	this.UserType = userType
	this.Metadata = metadata
	this.CreatedAt = createdAt
	return &this
}

// NewUserInviteWithDefaults instantiates a new UserInvite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInviteWithDefaults() *UserInvite {
	this := UserInvite{}
	return &this
}

// GetId returns the Id field value
func (o *UserInvite) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserInvite) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserInvite) SetId(v float32) {
	o.Id = v
}

// GetLegacyId returns the LegacyId field value
func (o *UserInvite) GetLegacyId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LegacyId
}

// GetLegacyIdOk returns a tuple with the LegacyId field value
// and a boolean to check if the value has been set.
func (o *UserInvite) GetLegacyIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LegacyId, true
}

// SetLegacyId sets field value
func (o *UserInvite) SetLegacyId(v float32) {
	o.LegacyId = v
}

// GetInvitedBy returns the InvitedBy field value
func (o *UserInvite) GetInvitedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvitedBy
}

// GetInvitedByOk returns a tuple with the InvitedBy field value
// and a boolean to check if the value has been set.
func (o *UserInvite) GetInvitedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvitedBy, true
}

// SetInvitedBy sets field value
func (o *UserInvite) SetInvitedBy(v string) {
	o.InvitedBy = v
}

// GetInvitedEmail returns the InvitedEmail field value
func (o *UserInvite) GetInvitedEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InvitedEmail
}

// GetInvitedEmailOk returns a tuple with the InvitedEmail field value
// and a boolean to check if the value has been set.
func (o *UserInvite) GetInvitedEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvitedEmail, true
}

// SetInvitedEmail sets field value
func (o *UserInvite) SetInvitedEmail(v string) {
	o.InvitedEmail = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *UserInvite) GetExpiresAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *UserInvite) GetExpiresAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *UserInvite) SetExpiresAt(v string) {
	o.ExpiresAt = v
}

// GetClaimedBy returns the ClaimedBy field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserInvite) GetClaimedBy() string {
	if o == nil || o.ClaimedBy.Get() == nil {
		var ret string
		return ret
	}

	return *o.ClaimedBy.Get()
}

// GetClaimedByOk returns a tuple with the ClaimedBy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInvite) GetClaimedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClaimedBy.Get(), o.ClaimedBy.IsSet()
}

// SetClaimedBy sets field value
func (o *UserInvite) SetClaimedBy(v string) {
	o.ClaimedBy.Set(&v)
}

// GetClaimedAt returns the ClaimedAt field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserInvite) GetClaimedAt() string {
	if o == nil || o.ClaimedAt.Get() == nil {
		var ret string
		return ret
	}

	return *o.ClaimedAt.Get()
}

// GetClaimedAtOk returns a tuple with the ClaimedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInvite) GetClaimedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClaimedAt.Get(), o.ClaimedAt.IsSet()
}

// SetClaimedAt sets field value
func (o *UserInvite) SetClaimedAt(v string) {
	o.ClaimedAt.Set(&v)
}

// GetUserType returns the UserType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserInvite) GetUserType() string {
	if o == nil || o.UserType.Get() == nil {
		var ret string
		return ret
	}

	return *o.UserType.Get()
}

// GetUserTypeOk returns a tuple with the UserType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInvite) GetUserTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserType.Get(), o.UserType.IsSet()
}

// SetUserType sets field value
func (o *UserInvite) SetUserType(v string) {
	o.UserType.Set(&v)
}

// GetMetadata returns the Metadata field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *UserInvite) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserInvite) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *UserInvite) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UserInvite) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UserInvite) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UserInvite) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetInviteLink returns the InviteLink field value if set, zero value otherwise.
func (o *UserInvite) GetInviteLink() string {
	if o == nil || IsNil(o.InviteLink) {
		var ret string
		return ret
	}
	return *o.InviteLink
}

// GetInviteLinkOk returns a tuple with the InviteLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInvite) GetInviteLinkOk() (*string, bool) {
	if o == nil || IsNil(o.InviteLink) {
		return nil, false
	}
	return o.InviteLink, true
}

// HasInviteLink returns a boolean if a field has been set.
func (o *UserInvite) HasInviteLink() bool {
	if o != nil && !IsNil(o.InviteLink) {
		return true
	}

	return false
}

// SetInviteLink gets a reference to the given string and assigns it to the InviteLink field.
func (o *UserInvite) SetInviteLink(v string) {
	o.InviteLink = &v
}

func (o UserInvite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserInvite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["legacy_id"] = o.LegacyId
	toSerialize["invited_by"] = o.InvitedBy
	toSerialize["invited_email"] = o.InvitedEmail
	toSerialize["expires_at"] = o.ExpiresAt
	toSerialize["claimed_by"] = o.ClaimedBy.Get()
	toSerialize["claimed_at"] = o.ClaimedAt.Get()
	toSerialize["user_type"] = o.UserType.Get()
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.InviteLink) {
		toSerialize["invite_link"] = o.InviteLink
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserInvite) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"legacy_id",
		"invited_by",
		"invited_email",
		"expires_at",
		"claimed_by",
		"claimed_at",
		"user_type",
		"metadata",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserInvite := _UserInvite{}

	err = json.Unmarshal(data, &varUserInvite)

	if err != nil {
		return err
	}

	*o = UserInvite(varUserInvite)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "legacy_id")
		delete(additionalProperties, "invited_by")
		delete(additionalProperties, "invited_email")
		delete(additionalProperties, "expires_at")
		delete(additionalProperties, "claimed_by")
		delete(additionalProperties, "claimed_at")
		delete(additionalProperties, "user_type")
		delete(additionalProperties, "metadata")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "invite_link")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserInvite struct {
	value *UserInvite
	isSet bool
}

func (v NullableUserInvite) Get() *UserInvite {
	return v.value
}

func (v *NullableUserInvite) Set(val *UserInvite) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInvite) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInvite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInvite(val *UserInvite) *NullableUserInvite {
	return &NullableUserInvite{value: val, isSet: true}
}

func (v NullableUserInvite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInvite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



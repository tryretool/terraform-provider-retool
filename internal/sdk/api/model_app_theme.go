/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the AppTheme type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppTheme{}

// AppTheme This object represents an app theme. App themes allow you to customize the look of your app. See https://docs.retool.com/apps/web/concepts/themes for more information.
type AppTheme struct {
	Id float32 `json:"id"`
	LegacyId float32 `json:"legacy_id"`
	// The name of the app theme.
	Name string `json:"name"`
	// The theme object.
	Theme map[string]interface{} `json:"theme"`
	AdditionalProperties map[string]interface{}
}

type _AppTheme AppTheme

// NewAppTheme instantiates a new AppTheme object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppTheme(id float32, legacyId float32, name string, theme map[string]interface{}) *AppTheme {
	this := AppTheme{}
	this.Id = id
	this.LegacyId = legacyId
	this.Name = name
	this.Theme = theme
	return &this
}

// NewAppThemeWithDefaults instantiates a new AppTheme object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppThemeWithDefaults() *AppTheme {
	this := AppTheme{}
	return &this
}

// GetId returns the Id field value
func (o *AppTheme) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AppTheme) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AppTheme) SetId(v float32) {
	o.Id = v
}

// GetLegacyId returns the LegacyId field value
func (o *AppTheme) GetLegacyId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LegacyId
}

// GetLegacyIdOk returns a tuple with the LegacyId field value
// and a boolean to check if the value has been set.
func (o *AppTheme) GetLegacyIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LegacyId, true
}

// SetLegacyId sets field value
func (o *AppTheme) SetLegacyId(v float32) {
	o.LegacyId = v
}

// GetName returns the Name field value
func (o *AppTheme) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AppTheme) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppTheme) SetName(v string) {
	o.Name = v
}

// GetTheme returns the Theme field value
func (o *AppTheme) GetTheme() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Theme
}

// GetThemeOk returns a tuple with the Theme field value
// and a boolean to check if the value has been set.
func (o *AppTheme) GetThemeOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Theme, true
}

// SetTheme sets field value
func (o *AppTheme) SetTheme(v map[string]interface{}) {
	o.Theme = v
}

func (o AppTheme) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppTheme) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["legacy_id"] = o.LegacyId
	toSerialize["name"] = o.Name
	toSerialize["theme"] = o.Theme

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AppTheme) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"legacy_id",
		"name",
		"theme",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppTheme := _AppTheme{}

	err = json.Unmarshal(data, &varAppTheme)

	if err != nil {
		return err
	}

	*o = AppTheme(varAppTheme)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "legacy_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "theme")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAppTheme struct {
	value *AppTheme
	isSet bool
}

func (v NullableAppTheme) Get() *AppTheme {
	return v.value
}

func (v *NullableAppTheme) Set(val *AppTheme) {
	v.value = val
	v.isSet = true
}

func (v NullableAppTheme) IsSet() bool {
	return v.isSet
}

func (v *NullableAppTheme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppTheme(val *AppTheme) *NullableAppTheme {
	return &NullableAppTheme{value: val, isSet: true}
}

func (v NullableAppTheme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppTheme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



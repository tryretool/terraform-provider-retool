/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SsoConfigPost200ResponseData - Result of setting SSO configuration
type SsoConfigPost200ResponseData struct {
	SSOConfig *SSOConfig
}

// SSOConfigAsSsoConfigPost200ResponseData is a convenience function that returns SSOConfig wrapped in SsoConfigPost200ResponseData
func SSOConfigAsSsoConfigPost200ResponseData(v *SSOConfig) SsoConfigPost200ResponseData {
	return SsoConfigPost200ResponseData{
		SSOConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SsoConfigPost200ResponseData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SSOConfig
	err = newStrictDecoder(data).Decode(&dst.SSOConfig)
	if err == nil {
		jsonSSOConfig, _ := json.Marshal(dst.SSOConfig)
		if string(jsonSSOConfig) == "{}" { // empty struct
			dst.SSOConfig = nil
		} else {
			match++
		}
	} else {
		dst.SSOConfig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SSOConfig = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SsoConfigPost200ResponseData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SsoConfigPost200ResponseData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SsoConfigPost200ResponseData) MarshalJSON() ([]byte, error) {
	if src.SSOConfig != nil {
		return json.Marshal(&src.SSOConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SsoConfigPost200ResponseData) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SSOConfig != nil {
		return obj.SSOConfig
	}

	// all schemas are nil
	return nil
}

type NullableSsoConfigPost200ResponseData struct {
	value *SsoConfigPost200ResponseData
	isSet bool
}

func (v NullableSsoConfigPost200ResponseData) Get() *SsoConfigPost200ResponseData {
	return v.value
}

func (v *NullableSsoConfigPost200ResponseData) Set(val *SsoConfigPost200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableSsoConfigPost200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableSsoConfigPost200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSsoConfigPost200ResponseData(val *SsoConfigPost200ResponseData) *NullableSsoConfigPost200ResponseData {
	return &NullableSsoConfigPost200ResponseData{value: val, isSet: true}
}

func (v NullableSsoConfigPost200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSsoConfigPost200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



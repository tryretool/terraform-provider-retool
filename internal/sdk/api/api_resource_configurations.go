/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// ResourceConfigurationsAPIService ResourceConfigurationsAPI service
type ResourceConfigurationsAPIService service

type ApiResourceConfigurationsConfigurationIdDeleteRequest struct {
	ctx context.Context
	ApiService *ResourceConfigurationsAPIService
	configurationId string
}

func (r ApiResourceConfigurationsConfigurationIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ResourceConfigurationsConfigurationIdDeleteExecute(r)
}

/*
ResourceConfigurationsConfigurationIdDelete Delete resource configuration

Available from API version 2.4.0+ and onprem version 3.34.0+. Deletes a resource configuration with the given id. The API token must have the "Resources > Write" scope.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configurationId
 @return ApiResourceConfigurationsConfigurationIdDeleteRequest
*/
func (a *ResourceConfigurationsAPIService) ResourceConfigurationsConfigurationIdDelete(ctx context.Context, configurationId string) ApiResourceConfigurationsConfigurationIdDeleteRequest {
	return ApiResourceConfigurationsConfigurationIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		configurationId: configurationId,
	}
}

// Execute executes the request
func (a *ResourceConfigurationsAPIService) ResourceConfigurationsConfigurationIdDeleteExecute(r ApiResourceConfigurationsConfigurationIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceConfigurationsAPIService.ResourceConfigurationsConfigurationIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resource_configurations/{configurationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"configurationId"+"}", url.PathEscape(parameterValueToString(r.configurationId, "configurationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiResourceConfigurationsConfigurationIdGetRequest struct {
	ctx context.Context
	ApiService *ResourceConfigurationsAPIService
	configurationId string
}

func (r ApiResourceConfigurationsConfigurationIdGetRequest) Execute() (*ResourceConfigurationsConfigurationIdGet200Response, *http.Response, error) {
	return r.ApiService.ResourceConfigurationsConfigurationIdGetExecute(r)
}

/*
ResourceConfigurationsConfigurationIdGet Get resource configuration by id

Available from API version 2.4.0+ and onprem version 3.28.0+. Returns a specific resource configuration. The API token must have the "Resources > Read" scope.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param configurationId
 @return ApiResourceConfigurationsConfigurationIdGetRequest
*/
func (a *ResourceConfigurationsAPIService) ResourceConfigurationsConfigurationIdGet(ctx context.Context, configurationId string) ApiResourceConfigurationsConfigurationIdGetRequest {
	return ApiResourceConfigurationsConfigurationIdGetRequest{
		ApiService: a,
		ctx: ctx,
		configurationId: configurationId,
	}
}

// Execute executes the request
//  @return ResourceConfigurationsConfigurationIdGet200Response
func (a *ResourceConfigurationsAPIService) ResourceConfigurationsConfigurationIdGetExecute(r ApiResourceConfigurationsConfigurationIdGetRequest) (*ResourceConfigurationsConfigurationIdGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResourceConfigurationsConfigurationIdGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceConfigurationsAPIService.ResourceConfigurationsConfigurationIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resource_configurations/{configurationId}"
	localVarPath = strings.Replace(localVarPath, "{"+"configurationId"+"}", url.PathEscape(parameterValueToString(r.configurationId, "configurationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResourceConfigurationsGetRequest struct {
	ctx context.Context
	ApiService *ResourceConfigurationsAPIService
	nextToken *string
	resourceType *string
	resourceId *ResourcesGet200ResponseDataInnerId
	environmentId *string
}

func (r ApiResourceConfigurationsGetRequest) NextToken(nextToken string) ApiResourceConfigurationsGetRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiResourceConfigurationsGetRequest) ResourceType(resourceType string) ApiResourceConfigurationsGetRequest {
	r.resourceType = &resourceType
	return r
}

func (r ApiResourceConfigurationsGetRequest) ResourceId(resourceId ResourcesGet200ResponseDataInnerId) ApiResourceConfigurationsGetRequest {
	r.resourceId = &resourceId
	return r
}

func (r ApiResourceConfigurationsGetRequest) EnvironmentId(environmentId string) ApiResourceConfigurationsGetRequest {
	r.environmentId = &environmentId
	return r
}

func (r ApiResourceConfigurationsGetRequest) Execute() (*ResourceConfigurationsGet200Response, *http.Response, error) {
	return r.ApiService.ResourceConfigurationsGetExecute(r)
}

/*
ResourceConfigurationsGet Get resource configurations

Available from API version 2.4.0+ and onprem version 3.34.0+. Gets a paginated list of resource configurations. The API token must have the "Resources > Read" scope.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiResourceConfigurationsGetRequest
*/
func (a *ResourceConfigurationsAPIService) ResourceConfigurationsGet(ctx context.Context) ApiResourceConfigurationsGetRequest {
	return ApiResourceConfigurationsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResourceConfigurationsGet200Response
func (a *ResourceConfigurationsAPIService) ResourceConfigurationsGetExecute(r ApiResourceConfigurationsGetRequest) (*ResourceConfigurationsGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResourceConfigurationsGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ResourceConfigurationsAPIService.ResourceConfigurationsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/resource_configurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.nextToken != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "next_token", r.nextToken, "")
	}
	if r.resourceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_type", r.resourceType, "")
	}
	if r.resourceId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "resource_id", r.resourceId, "")
	}
	if r.environmentId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "environment_id", r.environmentId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// PermissionsGrantPostRequestObject - struct for PermissionsGrantPostRequestObject
type PermissionsGrantPostRequestObject struct {
	PermissionsGrantPostRequestObjectOneOf *PermissionsGrantPostRequestObjectOneOf
}

// PermissionsGrantPostRequestObjectOneOfAsPermissionsGrantPostRequestObject is a convenience function that returns PermissionsGrantPostRequestObjectOneOf wrapped in PermissionsGrantPostRequestObject
func PermissionsGrantPostRequestObjectOneOfAsPermissionsGrantPostRequestObject(v *PermissionsGrantPostRequestObjectOneOf) PermissionsGrantPostRequestObject {
	return PermissionsGrantPostRequestObject{
		PermissionsGrantPostRequestObjectOneOf: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PermissionsGrantPostRequestObject) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into PermissionsGrantPostRequestObjectOneOf
	err = newStrictDecoder(data).Decode(&dst.PermissionsGrantPostRequestObjectOneOf)
	if err == nil {
		jsonPermissionsGrantPostRequestObjectOneOf, _ := json.Marshal(dst.PermissionsGrantPostRequestObjectOneOf)
		if string(jsonPermissionsGrantPostRequestObjectOneOf) == "{}" { // empty struct
			dst.PermissionsGrantPostRequestObjectOneOf = nil
		} else {
			match++
		}
	} else {
		dst.PermissionsGrantPostRequestObjectOneOf = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PermissionsGrantPostRequestObjectOneOf = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PermissionsGrantPostRequestObject)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PermissionsGrantPostRequestObject)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PermissionsGrantPostRequestObject) MarshalJSON() ([]byte, error) {
	if src.PermissionsGrantPostRequestObjectOneOf != nil {
		return json.Marshal(&src.PermissionsGrantPostRequestObjectOneOf)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PermissionsGrantPostRequestObject) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PermissionsGrantPostRequestObjectOneOf != nil {
		return obj.PermissionsGrantPostRequestObjectOneOf
	}

	// all schemas are nil
	return nil
}

type NullablePermissionsGrantPostRequestObject struct {
	value *PermissionsGrantPostRequestObject
	isSet bool
}

func (v NullablePermissionsGrantPostRequestObject) Get() *PermissionsGrantPostRequestObject {
	return v.value
}

func (v *NullablePermissionsGrantPostRequestObject) Set(val *PermissionsGrantPostRequestObject) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionsGrantPostRequestObject) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionsGrantPostRequestObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionsGrantPostRequestObject(val *PermissionsGrantPostRequestObject) *NullablePermissionsGrantPostRequestObject {
	return &NullablePermissionsGrantPostRequestObject{value: val, isSet: true}
}

func (v NullablePermissionsGrantPostRequestObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionsGrantPostRequestObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SourceControlConfigGet200ResponseDataOneOf1Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceControlConfigGet200ResponseDataOneOf1Config{}

// SourceControlConfigGet200ResponseDataOneOf1Config struct for SourceControlConfigGet200ResponseDataOneOf1Config
type SourceControlConfigGet200ResponseDataOneOf1Config struct {
	// The numerical project ID for your GitLab project. Find this ID listed below the project's name on the project's homepage.
	ProjectId float32 `json:"project_id"`
	// Your base GitLab URL. On GitLab Cloud, this is always https://gitlab.com. On GitLab self-managed, this is the URL where your instance is hosted.
	Url string `json:"url"`
	// The GitLab project access token to authenticate to the GitLab API.
	ProjectAccessToken string `json:"project_access_token"`
}

type _SourceControlConfigGet200ResponseDataOneOf1Config SourceControlConfigGet200ResponseDataOneOf1Config

// NewSourceControlConfigGet200ResponseDataOneOf1Config instantiates a new SourceControlConfigGet200ResponseDataOneOf1Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceControlConfigGet200ResponseDataOneOf1Config(projectId float32, url string, projectAccessToken string) *SourceControlConfigGet200ResponseDataOneOf1Config {
	this := SourceControlConfigGet200ResponseDataOneOf1Config{}
	this.ProjectId = projectId
	this.Url = url
	this.ProjectAccessToken = projectAccessToken
	return &this
}

// NewSourceControlConfigGet200ResponseDataOneOf1ConfigWithDefaults instantiates a new SourceControlConfigGet200ResponseDataOneOf1Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceControlConfigGet200ResponseDataOneOf1ConfigWithDefaults() *SourceControlConfigGet200ResponseDataOneOf1Config {
	this := SourceControlConfigGet200ResponseDataOneOf1Config{}
	return &this
}

// GetProjectId returns the ProjectId field value
func (o *SourceControlConfigGet200ResponseDataOneOf1Config) GetProjectId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf1Config) GetProjectIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *SourceControlConfigGet200ResponseDataOneOf1Config) SetProjectId(v float32) {
	o.ProjectId = v
}

// GetUrl returns the Url field value
func (o *SourceControlConfigGet200ResponseDataOneOf1Config) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf1Config) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SourceControlConfigGet200ResponseDataOneOf1Config) SetUrl(v string) {
	o.Url = v
}

// GetProjectAccessToken returns the ProjectAccessToken field value
func (o *SourceControlConfigGet200ResponseDataOneOf1Config) GetProjectAccessToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectAccessToken
}

// GetProjectAccessTokenOk returns a tuple with the ProjectAccessToken field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf1Config) GetProjectAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectAccessToken, true
}

// SetProjectAccessToken sets field value
func (o *SourceControlConfigGet200ResponseDataOneOf1Config) SetProjectAccessToken(v string) {
	o.ProjectAccessToken = v
}

func (o SourceControlConfigGet200ResponseDataOneOf1Config) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceControlConfigGet200ResponseDataOneOf1Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["project_id"] = o.ProjectId
	toSerialize["url"] = o.Url
	toSerialize["project_access_token"] = o.ProjectAccessToken
	return toSerialize, nil
}

func (o *SourceControlConfigGet200ResponseDataOneOf1Config) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"project_id",
		"url",
		"project_access_token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceControlConfigGet200ResponseDataOneOf1Config := _SourceControlConfigGet200ResponseDataOneOf1Config{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSourceControlConfigGet200ResponseDataOneOf1Config)

	if err != nil {
		return err
	}

	*o = SourceControlConfigGet200ResponseDataOneOf1Config(varSourceControlConfigGet200ResponseDataOneOf1Config)

	return err
}

type NullableSourceControlConfigGet200ResponseDataOneOf1Config struct {
	value *SourceControlConfigGet200ResponseDataOneOf1Config
	isSet bool
}

func (v NullableSourceControlConfigGet200ResponseDataOneOf1Config) Get() *SourceControlConfigGet200ResponseDataOneOf1Config {
	return v.value
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOf1Config) Set(val *SourceControlConfigGet200ResponseDataOneOf1Config) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceControlConfigGet200ResponseDataOneOf1Config) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOf1Config) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceControlConfigGet200ResponseDataOneOf1Config(val *SourceControlConfigGet200ResponseDataOneOf1Config) *NullableSourceControlConfigGet200ResponseDataOneOf1Config {
	return &NullableSourceControlConfigGet200ResponseDataOneOf1Config{value: val, isSet: true}
}

func (v NullableSourceControlConfigGet200ResponseDataOneOf1Config) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOf1Config) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



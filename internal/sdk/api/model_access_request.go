/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the AccessRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessRequest{}

// AccessRequest Access Request
type AccessRequest struct {
	Id float32 `json:"id"`
	Status string `json:"status"`
	LegacyId float32 `json:"legacy_id"`
	RequestingEmail string `json:"requesting_email"`
	UpdatedById NullableString `json:"updated_by_id"`
	AdditionalProperties map[string]interface{}
}

type _AccessRequest AccessRequest

// NewAccessRequest instantiates a new AccessRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessRequest(id float32, status string, legacyId float32, requestingEmail string, updatedById NullableString) *AccessRequest {
	this := AccessRequest{}
	this.Id = id
	this.Status = status
	this.LegacyId = legacyId
	this.RequestingEmail = requestingEmail
	this.UpdatedById = updatedById
	return &this
}

// NewAccessRequestWithDefaults instantiates a new AccessRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessRequestWithDefaults() *AccessRequest {
	this := AccessRequest{}
	return &this
}

// GetId returns the Id field value
func (o *AccessRequest) GetId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccessRequest) GetIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AccessRequest) SetId(v float32) {
	o.Id = v
}

// GetStatus returns the Status field value
func (o *AccessRequest) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *AccessRequest) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *AccessRequest) SetStatus(v string) {
	o.Status = v
}

// GetLegacyId returns the LegacyId field value
func (o *AccessRequest) GetLegacyId() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.LegacyId
}

// GetLegacyIdOk returns a tuple with the LegacyId field value
// and a boolean to check if the value has been set.
func (o *AccessRequest) GetLegacyIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LegacyId, true
}

// SetLegacyId sets field value
func (o *AccessRequest) SetLegacyId(v float32) {
	o.LegacyId = v
}

// GetRequestingEmail returns the RequestingEmail field value
func (o *AccessRequest) GetRequestingEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestingEmail
}

// GetRequestingEmailOk returns a tuple with the RequestingEmail field value
// and a boolean to check if the value has been set.
func (o *AccessRequest) GetRequestingEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestingEmail, true
}

// SetRequestingEmail sets field value
func (o *AccessRequest) SetRequestingEmail(v string) {
	o.RequestingEmail = v
}

// GetUpdatedById returns the UpdatedById field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AccessRequest) GetUpdatedById() string {
	if o == nil || o.UpdatedById.Get() == nil {
		var ret string
		return ret
	}

	return *o.UpdatedById.Get()
}

// GetUpdatedByIdOk returns a tuple with the UpdatedById field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessRequest) GetUpdatedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedById.Get(), o.UpdatedById.IsSet()
}

// SetUpdatedById sets field value
func (o *AccessRequest) SetUpdatedById(v string) {
	o.UpdatedById.Set(&v)
}

func (o AccessRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["status"] = o.Status
	toSerialize["legacy_id"] = o.LegacyId
	toSerialize["requesting_email"] = o.RequestingEmail
	toSerialize["updated_by_id"] = o.UpdatedById.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AccessRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"status",
		"legacy_id",
		"requesting_email",
		"updated_by_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessRequest := _AccessRequest{}

	err = json.Unmarshal(data, &varAccessRequest)

	if err != nil {
		return err
	}

	*o = AccessRequest(varAccessRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "status")
		delete(additionalProperties, "legacy_id")
		delete(additionalProperties, "requesting_email")
		delete(additionalProperties, "updated_by_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccessRequest struct {
	value *AccessRequest
	isSet bool
}

func (v NullableAccessRequest) Get() *AccessRequest {
	return v.value
}

func (v *NullableAccessRequest) Set(val *AccessRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessRequest(val *AccessRequest) *NullableAccessRequest {
	return &NullableAccessRequest{value: val, isSet: true}
}

func (v NullableAccessRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the SourceControlSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceControlSettings{}

// SourceControlSettings struct for SourceControlSettings
type SourceControlSettings struct {
	// When enabled, Retool automatically suggests a branch name on branch creation. Defaults to true.
	AutoBranchNamingEnabled bool `json:"auto_branch_naming_enabled"`
	// When enabled, Retool will use the template specified to create pull requests. Defaults to false.
	CustomPullRequestTemplateEnabled bool `json:"custom_pull_request_template_enabled"`
	// Pull requests created from Retool will use the template specified.
	CustomPullRequestTemplate string `json:"custom_pull_request_template"`
	// When set to true, creates a read-only instance of Retool, where app editing is disabled. Defaults to false.
	VersionControlLocked bool `json:"version_control_locked"`
	AdditionalProperties map[string]interface{}
}

type _SourceControlSettings SourceControlSettings

// NewSourceControlSettings instantiates a new SourceControlSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceControlSettings(autoBranchNamingEnabled bool, customPullRequestTemplateEnabled bool, customPullRequestTemplate string, versionControlLocked bool) *SourceControlSettings {
	this := SourceControlSettings{}
	this.AutoBranchNamingEnabled = autoBranchNamingEnabled
	this.CustomPullRequestTemplateEnabled = customPullRequestTemplateEnabled
	this.CustomPullRequestTemplate = customPullRequestTemplate
	this.VersionControlLocked = versionControlLocked
	return &this
}

// NewSourceControlSettingsWithDefaults instantiates a new SourceControlSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceControlSettingsWithDefaults() *SourceControlSettings {
	this := SourceControlSettings{}
	return &this
}

// GetAutoBranchNamingEnabled returns the AutoBranchNamingEnabled field value
func (o *SourceControlSettings) GetAutoBranchNamingEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoBranchNamingEnabled
}

// GetAutoBranchNamingEnabledOk returns a tuple with the AutoBranchNamingEnabled field value
// and a boolean to check if the value has been set.
func (o *SourceControlSettings) GetAutoBranchNamingEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AutoBranchNamingEnabled, true
}

// SetAutoBranchNamingEnabled sets field value
func (o *SourceControlSettings) SetAutoBranchNamingEnabled(v bool) {
	o.AutoBranchNamingEnabled = v
}

// GetCustomPullRequestTemplateEnabled returns the CustomPullRequestTemplateEnabled field value
func (o *SourceControlSettings) GetCustomPullRequestTemplateEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CustomPullRequestTemplateEnabled
}

// GetCustomPullRequestTemplateEnabledOk returns a tuple with the CustomPullRequestTemplateEnabled field value
// and a boolean to check if the value has been set.
func (o *SourceControlSettings) GetCustomPullRequestTemplateEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomPullRequestTemplateEnabled, true
}

// SetCustomPullRequestTemplateEnabled sets field value
func (o *SourceControlSettings) SetCustomPullRequestTemplateEnabled(v bool) {
	o.CustomPullRequestTemplateEnabled = v
}

// GetCustomPullRequestTemplate returns the CustomPullRequestTemplate field value
func (o *SourceControlSettings) GetCustomPullRequestTemplate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomPullRequestTemplate
}

// GetCustomPullRequestTemplateOk returns a tuple with the CustomPullRequestTemplate field value
// and a boolean to check if the value has been set.
func (o *SourceControlSettings) GetCustomPullRequestTemplateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomPullRequestTemplate, true
}

// SetCustomPullRequestTemplate sets field value
func (o *SourceControlSettings) SetCustomPullRequestTemplate(v string) {
	o.CustomPullRequestTemplate = v
}

// GetVersionControlLocked returns the VersionControlLocked field value
func (o *SourceControlSettings) GetVersionControlLocked() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.VersionControlLocked
}

// GetVersionControlLockedOk returns a tuple with the VersionControlLocked field value
// and a boolean to check if the value has been set.
func (o *SourceControlSettings) GetVersionControlLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionControlLocked, true
}

// SetVersionControlLocked sets field value
func (o *SourceControlSettings) SetVersionControlLocked(v bool) {
	o.VersionControlLocked = v
}

func (o SourceControlSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceControlSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auto_branch_naming_enabled"] = o.AutoBranchNamingEnabled
	toSerialize["custom_pull_request_template_enabled"] = o.CustomPullRequestTemplateEnabled
	toSerialize["custom_pull_request_template"] = o.CustomPullRequestTemplate
	toSerialize["version_control_locked"] = o.VersionControlLocked

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SourceControlSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auto_branch_naming_enabled",
		"custom_pull_request_template_enabled",
		"custom_pull_request_template",
		"version_control_locked",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceControlSettings := _SourceControlSettings{}

	err = json.Unmarshal(data, &varSourceControlSettings)

	if err != nil {
		return err
	}

	*o = SourceControlSettings(varSourceControlSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "auto_branch_naming_enabled")
		delete(additionalProperties, "custom_pull_request_template_enabled")
		delete(additionalProperties, "custom_pull_request_template")
		delete(additionalProperties, "version_control_locked")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSourceControlSettings struct {
	value *SourceControlSettings
	isSet bool
}

func (v NullableSourceControlSettings) Get() *SourceControlSettings {
	return v.value
}

func (v *NullableSourceControlSettings) Set(val *SourceControlSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceControlSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceControlSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceControlSettings(val *SourceControlSettings) *NullableSourceControlSettings {
	return &NullableSourceControlSettings{value: val, isSet: true}
}

func (v NullableSourceControlSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceControlSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



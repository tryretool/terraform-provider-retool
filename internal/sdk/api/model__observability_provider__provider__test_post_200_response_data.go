/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ObservabilityProviderProviderTestPost200ResponseData Send test error response
type ObservabilityProviderProviderTestPost200ResponseData struct {
	ObservabilityProviderProviderTestPost200ResponseDataAnyOf *ObservabilityProviderProviderTestPost200ResponseDataAnyOf
	ObservabilityProviderProviderTestPost200ResponseDataAnyOf1 *ObservabilityProviderProviderTestPost200ResponseDataAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ObservabilityProviderProviderTestPost200ResponseData) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ObservabilityProviderProviderTestPost200ResponseDataAnyOf
	err = json.Unmarshal(data, &dst.ObservabilityProviderProviderTestPost200ResponseDataAnyOf);
	if err == nil {
		jsonObservabilityProviderProviderTestPost200ResponseDataAnyOf, _ := json.Marshal(dst.ObservabilityProviderProviderTestPost200ResponseDataAnyOf)
		if string(jsonObservabilityProviderProviderTestPost200ResponseDataAnyOf) == "{}" { // empty struct
			dst.ObservabilityProviderProviderTestPost200ResponseDataAnyOf = nil
		} else {
			return nil // data stored in dst.ObservabilityProviderProviderTestPost200ResponseDataAnyOf, return on the first match
		}
	} else {
		dst.ObservabilityProviderProviderTestPost200ResponseDataAnyOf = nil
	}

	// try to unmarshal JSON data into ObservabilityProviderProviderTestPost200ResponseDataAnyOf1
	err = json.Unmarshal(data, &dst.ObservabilityProviderProviderTestPost200ResponseDataAnyOf1);
	if err == nil {
		jsonObservabilityProviderProviderTestPost200ResponseDataAnyOf1, _ := json.Marshal(dst.ObservabilityProviderProviderTestPost200ResponseDataAnyOf1)
		if string(jsonObservabilityProviderProviderTestPost200ResponseDataAnyOf1) == "{}" { // empty struct
			dst.ObservabilityProviderProviderTestPost200ResponseDataAnyOf1 = nil
		} else {
			return nil // data stored in dst.ObservabilityProviderProviderTestPost200ResponseDataAnyOf1, return on the first match
		}
	} else {
		dst.ObservabilityProviderProviderTestPost200ResponseDataAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ObservabilityProviderProviderTestPost200ResponseData)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ObservabilityProviderProviderTestPost200ResponseData) MarshalJSON() ([]byte, error) {
	if src.ObservabilityProviderProviderTestPost200ResponseDataAnyOf != nil {
		return json.Marshal(&src.ObservabilityProviderProviderTestPost200ResponseDataAnyOf)
	}

	if src.ObservabilityProviderProviderTestPost200ResponseDataAnyOf1 != nil {
		return json.Marshal(&src.ObservabilityProviderProviderTestPost200ResponseDataAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableObservabilityProviderProviderTestPost200ResponseData struct {
	value *ObservabilityProviderProviderTestPost200ResponseData
	isSet bool
}

func (v NullableObservabilityProviderProviderTestPost200ResponseData) Get() *ObservabilityProviderProviderTestPost200ResponseData {
	return v.value
}

func (v *NullableObservabilityProviderProviderTestPost200ResponseData) Set(val *ObservabilityProviderProviderTestPost200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableObservabilityProviderProviderTestPost200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableObservabilityProviderProviderTestPost200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservabilityProviderProviderTestPost200ResponseData(val *ObservabilityProviderProviderTestPost200ResponseData) *NullableObservabilityProviderProviderTestPost200ResponseData {
	return &NullableObservabilityProviderProviderTestPost200ResponseData{value: val, isSet: true}
}

func (v NullableObservabilityProviderProviderTestPost200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservabilityProviderProviderTestPost200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



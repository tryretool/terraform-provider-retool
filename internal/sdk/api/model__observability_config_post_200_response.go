/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the ObservabilityConfigPost200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservabilityConfigPost200Response{}

// ObservabilityConfigPost200Response struct for ObservabilityConfigPost200Response
type ObservabilityConfigPost200Response struct {
	// API request succeeded
	Success bool `json:"success"`
	Data ObservabilityConfigPost200ResponseData `json:"data"`
	AdditionalProperties map[string]interface{}
}

type _ObservabilityConfigPost200Response ObservabilityConfigPost200Response

// NewObservabilityConfigPost200Response instantiates a new ObservabilityConfigPost200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservabilityConfigPost200Response(success bool, data ObservabilityConfigPost200ResponseData) *ObservabilityConfigPost200Response {
	this := ObservabilityConfigPost200Response{}
	this.Success = success
	this.Data = data
	return &this
}

// NewObservabilityConfigPost200ResponseWithDefaults instantiates a new ObservabilityConfigPost200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservabilityConfigPost200ResponseWithDefaults() *ObservabilityConfigPost200Response {
	this := ObservabilityConfigPost200Response{}
	return &this
}

// GetSuccess returns the Success field value
func (o *ObservabilityConfigPost200Response) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *ObservabilityConfigPost200Response) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *ObservabilityConfigPost200Response) SetSuccess(v bool) {
	o.Success = v
}

// GetData returns the Data field value
func (o *ObservabilityConfigPost200Response) GetData() ObservabilityConfigPost200ResponseData {
	if o == nil {
		var ret ObservabilityConfigPost200ResponseData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ObservabilityConfigPost200Response) GetDataOk() (*ObservabilityConfigPost200ResponseData, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *ObservabilityConfigPost200Response) SetData(v ObservabilityConfigPost200ResponseData) {
	o.Data = v
}

func (o ObservabilityConfigPost200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservabilityConfigPost200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["success"] = o.Success
	toSerialize["data"] = o.Data

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ObservabilityConfigPost200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"success",
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObservabilityConfigPost200Response := _ObservabilityConfigPost200Response{}

	err = json.Unmarshal(data, &varObservabilityConfigPost200Response)

	if err != nil {
		return err
	}

	*o = ObservabilityConfigPost200Response(varObservabilityConfigPost200Response)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "success")
		delete(additionalProperties, "data")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableObservabilityConfigPost200Response struct {
	value *ObservabilityConfigPost200Response
	isSet bool
}

func (v NullableObservabilityConfigPost200Response) Get() *ObservabilityConfigPost200Response {
	return v.value
}

func (v *NullableObservabilityConfigPost200Response) Set(val *ObservabilityConfigPost200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableObservabilityConfigPost200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableObservabilityConfigPost200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservabilityConfigPost200Response(val *ObservabilityConfigPost200Response) *NullableObservabilityConfigPost200Response {
	return &NullableObservabilityConfigPost200Response{value: val, isSet: true}
}

func (v NullableObservabilityConfigPost200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservabilityConfigPost200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



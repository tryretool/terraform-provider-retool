/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccessRequestsAccessRequestIdPatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessRequestsAccessRequestIdPatchRequest{}

// AccessRequestsAccessRequestIdPatchRequest The body of a request to update an access request's status.
type AccessRequestsAccessRequestIdPatchRequest struct {
	// A list of operations to apply to the access request. See the [JSON PATCH specification](https://tools.ietf.org/html/rfc6902) for more details.
	Operations []UsersUserIdPatchRequestOperationsInnerAnyOf2 `json:"operations"`
}

type _AccessRequestsAccessRequestIdPatchRequest AccessRequestsAccessRequestIdPatchRequest

// NewAccessRequestsAccessRequestIdPatchRequest instantiates a new AccessRequestsAccessRequestIdPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessRequestsAccessRequestIdPatchRequest(operations []UsersUserIdPatchRequestOperationsInnerAnyOf2) *AccessRequestsAccessRequestIdPatchRequest {
	this := AccessRequestsAccessRequestIdPatchRequest{}
	this.Operations = operations
	return &this
}

// NewAccessRequestsAccessRequestIdPatchRequestWithDefaults instantiates a new AccessRequestsAccessRequestIdPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessRequestsAccessRequestIdPatchRequestWithDefaults() *AccessRequestsAccessRequestIdPatchRequest {
	this := AccessRequestsAccessRequestIdPatchRequest{}
	return &this
}

// GetOperations returns the Operations field value
func (o *AccessRequestsAccessRequestIdPatchRequest) GetOperations() []UsersUserIdPatchRequestOperationsInnerAnyOf2 {
	if o == nil {
		var ret []UsersUserIdPatchRequestOperationsInnerAnyOf2
		return ret
	}

	return o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value
// and a boolean to check if the value has been set.
func (o *AccessRequestsAccessRequestIdPatchRequest) GetOperationsOk() ([]UsersUserIdPatchRequestOperationsInnerAnyOf2, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operations, true
}

// SetOperations sets field value
func (o *AccessRequestsAccessRequestIdPatchRequest) SetOperations(v []UsersUserIdPatchRequestOperationsInnerAnyOf2) {
	o.Operations = v
}

func (o AccessRequestsAccessRequestIdPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessRequestsAccessRequestIdPatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["operations"] = o.Operations
	return toSerialize, nil
}

func (o *AccessRequestsAccessRequestIdPatchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccessRequestsAccessRequestIdPatchRequest := _AccessRequestsAccessRequestIdPatchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccessRequestsAccessRequestIdPatchRequest)

	if err != nil {
		return err
	}

	*o = AccessRequestsAccessRequestIdPatchRequest(varAccessRequestsAccessRequestIdPatchRequest)

	return err
}

type NullableAccessRequestsAccessRequestIdPatchRequest struct {
	value *AccessRequestsAccessRequestIdPatchRequest
	isSet bool
}

func (v NullableAccessRequestsAccessRequestIdPatchRequest) Get() *AccessRequestsAccessRequestIdPatchRequest {
	return v.value
}

func (v *NullableAccessRequestsAccessRequestIdPatchRequest) Set(val *AccessRequestsAccessRequestIdPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessRequestsAccessRequestIdPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessRequestsAccessRequestIdPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessRequestsAccessRequestIdPatchRequest(val *AccessRequestsAccessRequestIdPatchRequest) *NullableAccessRequestsAccessRequestIdPatchRequest {
	return &NullableAccessRequestsAccessRequestIdPatchRequest{value: val, isSet: true}
}

func (v NullableAccessRequestsAccessRequestIdPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessRequestsAccessRequestIdPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



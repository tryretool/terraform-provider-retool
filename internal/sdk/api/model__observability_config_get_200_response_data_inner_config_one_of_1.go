/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservabilityConfigGet200ResponseDataInnerConfigOneOf1{}

// ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 struct for ObservabilityConfigGet200ResponseDataInnerConfigOneOf1
type ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 struct {
	// This is an enumerated field that can only take the value \"Datadog\". It identifies the provider of the observability configuration.
	Provider string `json:"provider"`
	// This is a string field that represents the API key for Datadog. This key is used to authenticate with the Datadog API.
	ApiKey string `json:"api_key"`
	AdditionalProperties map[string]interface{}
}

type _ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 ObservabilityConfigGet200ResponseDataInnerConfigOneOf1

// NewObservabilityConfigGet200ResponseDataInnerConfigOneOf1 instantiates a new ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservabilityConfigGet200ResponseDataInnerConfigOneOf1(provider string, apiKey string) *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 {
	this := ObservabilityConfigGet200ResponseDataInnerConfigOneOf1{}
	this.Provider = provider
	this.ApiKey = apiKey
	return &this
}

// NewObservabilityConfigGet200ResponseDataInnerConfigOneOf1WithDefaults instantiates a new ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservabilityConfigGet200ResponseDataInnerConfigOneOf1WithDefaults() *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 {
	this := ObservabilityConfigGet200ResponseDataInnerConfigOneOf1{}
	return &this
}

// GetProvider returns the Provider field value
func (o *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1) SetProvider(v string) {
	o.Provider = v
}

// GetApiKey returns the ApiKey field value
func (o *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1) GetApiKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
func (o *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1) GetApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiKey, true
}

// SetApiKey sets field value
func (o *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1) SetApiKey(v string) {
	o.ApiKey = v
}

func (o ObservabilityConfigGet200ResponseDataInnerConfigOneOf1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservabilityConfigGet200ResponseDataInnerConfigOneOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["provider"] = o.Provider
	toSerialize["api_key"] = o.ApiKey

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"provider",
		"api_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObservabilityConfigGet200ResponseDataInnerConfigOneOf1 := _ObservabilityConfigGet200ResponseDataInnerConfigOneOf1{}

	err = json.Unmarshal(data, &varObservabilityConfigGet200ResponseDataInnerConfigOneOf1)

	if err != nil {
		return err
	}

	*o = ObservabilityConfigGet200ResponseDataInnerConfigOneOf1(varObservabilityConfigGet200ResponseDataInnerConfigOneOf1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "provider")
		delete(additionalProperties, "api_key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableObservabilityConfigGet200ResponseDataInnerConfigOneOf1 struct {
	value *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1
	isSet bool
}

func (v NullableObservabilityConfigGet200ResponseDataInnerConfigOneOf1) Get() *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1 {
	return v.value
}

func (v *NullableObservabilityConfigGet200ResponseDataInnerConfigOneOf1) Set(val *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableObservabilityConfigGet200ResponseDataInnerConfigOneOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableObservabilityConfigGet200ResponseDataInnerConfigOneOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservabilityConfigGet200ResponseDataInnerConfigOneOf1(val *ObservabilityConfigGet200ResponseDataInnerConfigOneOf1) *NullableObservabilityConfigGet200ResponseDataInnerConfigOneOf1 {
	return &NullableObservabilityConfigGet200ResponseDataInnerConfigOneOf1{value: val, isSet: true}
}

func (v NullableObservabilityConfigGet200ResponseDataInnerConfigOneOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservabilityConfigGet200ResponseDataInnerConfigOneOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



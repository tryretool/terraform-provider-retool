/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SourceControlConfigGet200ResponseDataOneOf3Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceControlConfigGet200ResponseDataOneOf3Config{}

// SourceControlConfigGet200ResponseDataOneOf3Config struct for SourceControlConfigGet200ResponseDataOneOf3Config
type SourceControlConfigGet200ResponseDataOneOf3Config struct {
	// Your Bitbucket username.
	Username string `json:"username"`
	// The domain used to access your self-hosted Bitbucket instance. Defaults to https://bitbucket.org/.
	Url *string `json:"url,omitempty"`
	// The REST API route for your self-hosted Bitbucket instance. Defaults to https://api.bitbucket.org/2.0. 
	EnterpriseApiUrl *string `json:"enterprise_api_url,omitempty"`
	// Your Bitbucket app password.
	AppPassword string `json:"app_password"`
}

type _SourceControlConfigGet200ResponseDataOneOf3Config SourceControlConfigGet200ResponseDataOneOf3Config

// NewSourceControlConfigGet200ResponseDataOneOf3Config instantiates a new SourceControlConfigGet200ResponseDataOneOf3Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceControlConfigGet200ResponseDataOneOf3Config(username string, appPassword string) *SourceControlConfigGet200ResponseDataOneOf3Config {
	this := SourceControlConfigGet200ResponseDataOneOf3Config{}
	this.Username = username
	this.AppPassword = appPassword
	return &this
}

// NewSourceControlConfigGet200ResponseDataOneOf3ConfigWithDefaults instantiates a new SourceControlConfigGet200ResponseDataOneOf3Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceControlConfigGet200ResponseDataOneOf3ConfigWithDefaults() *SourceControlConfigGet200ResponseDataOneOf3Config {
	this := SourceControlConfigGet200ResponseDataOneOf3Config{}
	return &this
}

// GetUsername returns the Username field value
func (o *SourceControlConfigGet200ResponseDataOneOf3Config) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf3Config) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *SourceControlConfigGet200ResponseDataOneOf3Config) SetUsername(v string) {
	o.Username = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SourceControlConfigGet200ResponseDataOneOf3Config) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf3Config) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf3Config) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SourceControlConfigGet200ResponseDataOneOf3Config) SetUrl(v string) {
	o.Url = &v
}

// GetEnterpriseApiUrl returns the EnterpriseApiUrl field value if set, zero value otherwise.
func (o *SourceControlConfigGet200ResponseDataOneOf3Config) GetEnterpriseApiUrl() string {
	if o == nil || IsNil(o.EnterpriseApiUrl) {
		var ret string
		return ret
	}
	return *o.EnterpriseApiUrl
}

// GetEnterpriseApiUrlOk returns a tuple with the EnterpriseApiUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf3Config) GetEnterpriseApiUrlOk() (*string, bool) {
	if o == nil || IsNil(o.EnterpriseApiUrl) {
		return nil, false
	}
	return o.EnterpriseApiUrl, true
}

// HasEnterpriseApiUrl returns a boolean if a field has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf3Config) HasEnterpriseApiUrl() bool {
	if o != nil && !IsNil(o.EnterpriseApiUrl) {
		return true
	}

	return false
}

// SetEnterpriseApiUrl gets a reference to the given string and assigns it to the EnterpriseApiUrl field.
func (o *SourceControlConfigGet200ResponseDataOneOf3Config) SetEnterpriseApiUrl(v string) {
	o.EnterpriseApiUrl = &v
}

// GetAppPassword returns the AppPassword field value
func (o *SourceControlConfigGet200ResponseDataOneOf3Config) GetAppPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppPassword
}

// GetAppPasswordOk returns a tuple with the AppPassword field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf3Config) GetAppPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppPassword, true
}

// SetAppPassword sets field value
func (o *SourceControlConfigGet200ResponseDataOneOf3Config) SetAppPassword(v string) {
	o.AppPassword = v
}

func (o SourceControlConfigGet200ResponseDataOneOf3Config) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceControlConfigGet200ResponseDataOneOf3Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.EnterpriseApiUrl) {
		toSerialize["enterprise_api_url"] = o.EnterpriseApiUrl
	}
	toSerialize["app_password"] = o.AppPassword
	return toSerialize, nil
}

func (o *SourceControlConfigGet200ResponseDataOneOf3Config) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"app_password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceControlConfigGet200ResponseDataOneOf3Config := _SourceControlConfigGet200ResponseDataOneOf3Config{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSourceControlConfigGet200ResponseDataOneOf3Config)

	if err != nil {
		return err
	}

	*o = SourceControlConfigGet200ResponseDataOneOf3Config(varSourceControlConfigGet200ResponseDataOneOf3Config)

	return err
}

type NullableSourceControlConfigGet200ResponseDataOneOf3Config struct {
	value *SourceControlConfigGet200ResponseDataOneOf3Config
	isSet bool
}

func (v NullableSourceControlConfigGet200ResponseDataOneOf3Config) Get() *SourceControlConfigGet200ResponseDataOneOf3Config {
	return v.value
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOf3Config) Set(val *SourceControlConfigGet200ResponseDataOneOf3Config) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceControlConfigGet200ResponseDataOneOf3Config) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOf3Config) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceControlConfigGet200ResponseDataOneOf3Config(val *SourceControlConfigGet200ResponseDataOneOf3Config) *NullableSourceControlConfigGet200ResponseDataOneOf3Config {
	return &NullableSourceControlConfigGet200ResponseDataOneOf3Config{value: val, isSet: true}
}

func (v NullableSourceControlConfigGet200ResponseDataOneOf3Config) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOf3Config) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



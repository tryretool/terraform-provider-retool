/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ResourcesPostRequestOptions struct for ResourcesPostRequestOptions
type ResourcesPostRequestOptions struct {
	MySQLOptions *MySQLOptions
	PostgresOptions *PostgresOptions
	RedshiftOptions *RedshiftOptions
	RestAPIOptions *RestAPIOptions
	SnowflakeOptions *SnowflakeOptions
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ResourcesPostRequestOptions) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into MySQLOptions
	err = json.Unmarshal(data, &dst.MySQLOptions);
	if err == nil {
		jsonMySQLOptions, _ := json.Marshal(dst.MySQLOptions)
		if string(jsonMySQLOptions) == "{}" { // empty struct
			dst.MySQLOptions = nil
		} else {
			return nil // data stored in dst.MySQLOptions, return on the first match
		}
	} else {
		dst.MySQLOptions = nil
	}

	// try to unmarshal JSON data into PostgresOptions
	err = json.Unmarshal(data, &dst.PostgresOptions);
	if err == nil {
		jsonPostgresOptions, _ := json.Marshal(dst.PostgresOptions)
		if string(jsonPostgresOptions) == "{}" { // empty struct
			dst.PostgresOptions = nil
		} else {
			return nil // data stored in dst.PostgresOptions, return on the first match
		}
	} else {
		dst.PostgresOptions = nil
	}

	// try to unmarshal JSON data into RedshiftOptions
	err = json.Unmarshal(data, &dst.RedshiftOptions);
	if err == nil {
		jsonRedshiftOptions, _ := json.Marshal(dst.RedshiftOptions)
		if string(jsonRedshiftOptions) == "{}" { // empty struct
			dst.RedshiftOptions = nil
		} else {
			return nil // data stored in dst.RedshiftOptions, return on the first match
		}
	} else {
		dst.RedshiftOptions = nil
	}

	// try to unmarshal JSON data into RestAPIOptions
	err = json.Unmarshal(data, &dst.RestAPIOptions);
	if err == nil {
		jsonRestAPIOptions, _ := json.Marshal(dst.RestAPIOptions)
		if string(jsonRestAPIOptions) == "{}" { // empty struct
			dst.RestAPIOptions = nil
		} else {
			return nil // data stored in dst.RestAPIOptions, return on the first match
		}
	} else {
		dst.RestAPIOptions = nil
	}

	// try to unmarshal JSON data into SnowflakeOptions
	err = json.Unmarshal(data, &dst.SnowflakeOptions);
	if err == nil {
		jsonSnowflakeOptions, _ := json.Marshal(dst.SnowflakeOptions)
		if string(jsonSnowflakeOptions) == "{}" { // empty struct
			dst.SnowflakeOptions = nil
		} else {
			return nil // data stored in dst.SnowflakeOptions, return on the first match
		}
	} else {
		dst.SnowflakeOptions = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ResourcesPostRequestOptions)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ResourcesPostRequestOptions) MarshalJSON() ([]byte, error) {
	if src.MySQLOptions != nil {
		return json.Marshal(&src.MySQLOptions)
	}

	if src.PostgresOptions != nil {
		return json.Marshal(&src.PostgresOptions)
	}

	if src.RedshiftOptions != nil {
		return json.Marshal(&src.RedshiftOptions)
	}

	if src.RestAPIOptions != nil {
		return json.Marshal(&src.RestAPIOptions)
	}

	if src.SnowflakeOptions != nil {
		return json.Marshal(&src.SnowflakeOptions)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableResourcesPostRequestOptions struct {
	value *ResourcesPostRequestOptions
	isSet bool
}

func (v NullableResourcesPostRequestOptions) Get() *ResourcesPostRequestOptions {
	return v.value
}

func (v *NullableResourcesPostRequestOptions) Set(val *ResourcesPostRequestOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableResourcesPostRequestOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableResourcesPostRequestOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourcesPostRequestOptions(val *ResourcesPostRequestOptions) *NullableResourcesPostRequestOptions {
	return &NullableResourcesPostRequestOptions{value: val, isSet: true}
}

func (v NullableResourcesPostRequestOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourcesPostRequestOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



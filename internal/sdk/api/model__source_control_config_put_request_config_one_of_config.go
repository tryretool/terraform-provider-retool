/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// SourceControlConfigPutRequestConfigOneOfConfig - struct for SourceControlConfigPutRequestConfigOneOfConfig
type SourceControlConfigPutRequestConfigOneOfConfig struct {
	SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf *SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf
	SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1 *SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1
}

// SourceControlConfigGet200ResponseDataAnyOfConfigAnyOfAsSourceControlConfigPutRequestConfigOneOfConfig is a convenience function that returns SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf wrapped in SourceControlConfigPutRequestConfigOneOfConfig
func SourceControlConfigGet200ResponseDataAnyOfConfigAnyOfAsSourceControlConfigPutRequestConfigOneOfConfig(v *SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf) SourceControlConfigPutRequestConfigOneOfConfig {
	return SourceControlConfigPutRequestConfigOneOfConfig{
		SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf: v,
	}
}

// SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1AsSourceControlConfigPutRequestConfigOneOfConfig is a convenience function that returns SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1 wrapped in SourceControlConfigPutRequestConfigOneOfConfig
func SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1AsSourceControlConfigPutRequestConfigOneOfConfig(v *SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1) SourceControlConfigPutRequestConfigOneOfConfig {
	return SourceControlConfigPutRequestConfigOneOfConfig{
		SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SourceControlConfigPutRequestConfigOneOfConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf
	err = newStrictDecoder(data).Decode(&dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf)
	if err == nil {
		jsonSourceControlConfigGet200ResponseDataAnyOfConfigAnyOf, _ := json.Marshal(dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf)
		if string(jsonSourceControlConfigGet200ResponseDataAnyOfConfigAnyOf) == "{}" { // empty struct
			dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf = nil
		} else {
			match++
		}
	} else {
		dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf = nil
	}

	// try to unmarshal data into SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1
	err = newStrictDecoder(data).Decode(&dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1)
	if err == nil {
		jsonSourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1, _ := json.Marshal(dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1)
		if string(jsonSourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1) == "{}" { // empty struct
			dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1 = nil
		} else {
			match++
		}
	} else {
		dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf = nil
		dst.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SourceControlConfigPutRequestConfigOneOfConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SourceControlConfigPutRequestConfigOneOfConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SourceControlConfigPutRequestConfigOneOfConfig) MarshalJSON() ([]byte, error) {
	if src.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf != nil {
		return json.Marshal(&src.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf)
	}

	if src.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1 != nil {
		return json.Marshal(&src.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SourceControlConfigPutRequestConfigOneOfConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf != nil {
		return obj.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf
	}

	if obj.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1 != nil {
		return obj.SourceControlConfigGet200ResponseDataAnyOfConfigAnyOf1
	}

	// all schemas are nil
	return nil
}

type NullableSourceControlConfigPutRequestConfigOneOfConfig struct {
	value *SourceControlConfigPutRequestConfigOneOfConfig
	isSet bool
}

func (v NullableSourceControlConfigPutRequestConfigOneOfConfig) Get() *SourceControlConfigPutRequestConfigOneOfConfig {
	return v.value
}

func (v *NullableSourceControlConfigPutRequestConfigOneOfConfig) Set(val *SourceControlConfigPutRequestConfigOneOfConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceControlConfigPutRequestConfigOneOfConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceControlConfigPutRequestConfigOneOfConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceControlConfigPutRequestConfigOneOfConfig(val *SourceControlConfigPutRequestConfigOneOfConfig) *NullableSourceControlConfigPutRequestConfigOneOfConfig {
	return &NullableSourceControlConfigPutRequestConfigOneOfConfig{value: val, isSet: true}
}

func (v NullableSourceControlConfigPutRequestConfigOneOfConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceControlConfigPutRequestConfigOneOfConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UsageUserDetailsGet200ResponseDataViewerSummaryInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsageUserDetailsGet200ResponseDataViewerSummaryInner{}

// UsageUserDetailsGet200ResponseDataViewerSummaryInner struct for UsageUserDetailsGet200ResponseDataViewerSummaryInner
type UsageUserDetailsGet200ResponseDataViewerSummaryInner struct {
	AppName string `json:"app_name"`
	OrgId string `json:"org_id"`
	Host string `json:"host"`
	Count float32 `json:"count"`
}

type _UsageUserDetailsGet200ResponseDataViewerSummaryInner UsageUserDetailsGet200ResponseDataViewerSummaryInner

// NewUsageUserDetailsGet200ResponseDataViewerSummaryInner instantiates a new UsageUserDetailsGet200ResponseDataViewerSummaryInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageUserDetailsGet200ResponseDataViewerSummaryInner(appName string, orgId string, host string, count float32) *UsageUserDetailsGet200ResponseDataViewerSummaryInner {
	this := UsageUserDetailsGet200ResponseDataViewerSummaryInner{}
	this.AppName = appName
	this.OrgId = orgId
	this.Host = host
	this.Count = count
	return &this
}

// NewUsageUserDetailsGet200ResponseDataViewerSummaryInnerWithDefaults instantiates a new UsageUserDetailsGet200ResponseDataViewerSummaryInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageUserDetailsGet200ResponseDataViewerSummaryInnerWithDefaults() *UsageUserDetailsGet200ResponseDataViewerSummaryInner {
	this := UsageUserDetailsGet200ResponseDataViewerSummaryInner{}
	return &this
}

// GetAppName returns the AppName field value
func (o *UsageUserDetailsGet200ResponseDataViewerSummaryInner) GetAppName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value
// and a boolean to check if the value has been set.
func (o *UsageUserDetailsGet200ResponseDataViewerSummaryInner) GetAppNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppName, true
}

// SetAppName sets field value
func (o *UsageUserDetailsGet200ResponseDataViewerSummaryInner) SetAppName(v string) {
	o.AppName = v
}

// GetOrgId returns the OrgId field value
func (o *UsageUserDetailsGet200ResponseDataViewerSummaryInner) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *UsageUserDetailsGet200ResponseDataViewerSummaryInner) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *UsageUserDetailsGet200ResponseDataViewerSummaryInner) SetOrgId(v string) {
	o.OrgId = v
}

// GetHost returns the Host field value
func (o *UsageUserDetailsGet200ResponseDataViewerSummaryInner) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *UsageUserDetailsGet200ResponseDataViewerSummaryInner) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *UsageUserDetailsGet200ResponseDataViewerSummaryInner) SetHost(v string) {
	o.Host = v
}

// GetCount returns the Count field value
func (o *UsageUserDetailsGet200ResponseDataViewerSummaryInner) GetCount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *UsageUserDetailsGet200ResponseDataViewerSummaryInner) GetCountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *UsageUserDetailsGet200ResponseDataViewerSummaryInner) SetCount(v float32) {
	o.Count = v
}

func (o UsageUserDetailsGet200ResponseDataViewerSummaryInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsageUserDetailsGet200ResponseDataViewerSummaryInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["app_name"] = o.AppName
	toSerialize["org_id"] = o.OrgId
	toSerialize["host"] = o.Host
	toSerialize["count"] = o.Count
	return toSerialize, nil
}

func (o *UsageUserDetailsGet200ResponseDataViewerSummaryInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"app_name",
		"org_id",
		"host",
		"count",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsageUserDetailsGet200ResponseDataViewerSummaryInner := _UsageUserDetailsGet200ResponseDataViewerSummaryInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUsageUserDetailsGet200ResponseDataViewerSummaryInner)

	if err != nil {
		return err
	}

	*o = UsageUserDetailsGet200ResponseDataViewerSummaryInner(varUsageUserDetailsGet200ResponseDataViewerSummaryInner)

	return err
}

type NullableUsageUserDetailsGet200ResponseDataViewerSummaryInner struct {
	value *UsageUserDetailsGet200ResponseDataViewerSummaryInner
	isSet bool
}

func (v NullableUsageUserDetailsGet200ResponseDataViewerSummaryInner) Get() *UsageUserDetailsGet200ResponseDataViewerSummaryInner {
	return v.value
}

func (v *NullableUsageUserDetailsGet200ResponseDataViewerSummaryInner) Set(val *UsageUserDetailsGet200ResponseDataViewerSummaryInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageUserDetailsGet200ResponseDataViewerSummaryInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageUserDetailsGet200ResponseDataViewerSummaryInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageUserDetailsGet200ResponseDataViewerSummaryInner(val *UsageUserDetailsGet200ResponseDataViewerSummaryInner) *NullableUsageUserDetailsGet200ResponseDataViewerSummaryInner {
	return &NullableUsageUserDetailsGet200ResponseDataViewerSummaryInner{value: val, isSet: true}
}

func (v NullableUsageUserDetailsGet200ResponseDataViewerSummaryInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageUserDetailsGet200ResponseDataViewerSummaryInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



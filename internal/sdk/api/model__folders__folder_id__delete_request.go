/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the FoldersFolderIdDeleteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FoldersFolderIdDeleteRequest{}

// FoldersFolderIdDeleteRequest struct for FoldersFolderIdDeleteRequest
type FoldersFolderIdDeleteRequest struct {
	// Should the folder's contents also be deleted?
	Recursive *bool `json:"recursive,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FoldersFolderIdDeleteRequest FoldersFolderIdDeleteRequest

// NewFoldersFolderIdDeleteRequest instantiates a new FoldersFolderIdDeleteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFoldersFolderIdDeleteRequest() *FoldersFolderIdDeleteRequest {
	this := FoldersFolderIdDeleteRequest{}
	return &this
}

// NewFoldersFolderIdDeleteRequestWithDefaults instantiates a new FoldersFolderIdDeleteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFoldersFolderIdDeleteRequestWithDefaults() *FoldersFolderIdDeleteRequest {
	this := FoldersFolderIdDeleteRequest{}
	return &this
}

// GetRecursive returns the Recursive field value if set, zero value otherwise.
func (o *FoldersFolderIdDeleteRequest) GetRecursive() bool {
	if o == nil || IsNil(o.Recursive) {
		var ret bool
		return ret
	}
	return *o.Recursive
}

// GetRecursiveOk returns a tuple with the Recursive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FoldersFolderIdDeleteRequest) GetRecursiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Recursive) {
		return nil, false
	}
	return o.Recursive, true
}

// HasRecursive returns a boolean if a field has been set.
func (o *FoldersFolderIdDeleteRequest) HasRecursive() bool {
	if o != nil && !IsNil(o.Recursive) {
		return true
	}

	return false
}

// SetRecursive gets a reference to the given bool and assigns it to the Recursive field.
func (o *FoldersFolderIdDeleteRequest) SetRecursive(v bool) {
	o.Recursive = &v
}

func (o FoldersFolderIdDeleteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FoldersFolderIdDeleteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Recursive) {
		toSerialize["recursive"] = o.Recursive
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FoldersFolderIdDeleteRequest) UnmarshalJSON(data []byte) (err error) {
	varFoldersFolderIdDeleteRequest := _FoldersFolderIdDeleteRequest{}

	err = json.Unmarshal(data, &varFoldersFolderIdDeleteRequest)

	if err != nil {
		return err
	}

	*o = FoldersFolderIdDeleteRequest(varFoldersFolderIdDeleteRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "recursive")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFoldersFolderIdDeleteRequest struct {
	value *FoldersFolderIdDeleteRequest
	isSet bool
}

func (v NullableFoldersFolderIdDeleteRequest) Get() *FoldersFolderIdDeleteRequest {
	return v.value
}

func (v *NullableFoldersFolderIdDeleteRequest) Set(val *FoldersFolderIdDeleteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFoldersFolderIdDeleteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFoldersFolderIdDeleteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFoldersFolderIdDeleteRequest(val *FoldersFolderIdDeleteRequest) *NullableFoldersFolderIdDeleteRequest {
	return &NullableFoldersFolderIdDeleteRequest{value: val, isSet: true}
}

func (v NullableFoldersFolderIdDeleteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFoldersFolderIdDeleteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



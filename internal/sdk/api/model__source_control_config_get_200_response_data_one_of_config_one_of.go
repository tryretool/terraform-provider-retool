/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SourceControlConfigGet200ResponseDataOneOfConfigOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceControlConfigGet200ResponseDataOneOfConfigOneOf{}

// SourceControlConfigGet200ResponseDataOneOfConfigOneOf struct for SourceControlConfigGet200ResponseDataOneOfConfigOneOf
type SourceControlConfigGet200ResponseDataOneOfConfigOneOf struct {
	Type string `json:"type"`
	// The GitHub App ID.
	AppId string `json:"app_id"`
	// The GitHub installation ID. This can be found at the end of the installation URL.
	InstallationId string `json:"installation_id"`
	// The base64-encoded private key.
	PrivateKey string `json:"private_key"`
	// The domain used to access your self-hosted GitHub instance.
	Url *string `json:"url,omitempty"`
	// The REST API route for your self-hosted GitHub instance. Defaults to https://[hostname]/api/v3.
	EnterpriseApiUrl *string `json:"enterprise_api_url,omitempty"`
}

type _SourceControlConfigGet200ResponseDataOneOfConfigOneOf SourceControlConfigGet200ResponseDataOneOfConfigOneOf

// NewSourceControlConfigGet200ResponseDataOneOfConfigOneOf instantiates a new SourceControlConfigGet200ResponseDataOneOfConfigOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceControlConfigGet200ResponseDataOneOfConfigOneOf(type_ string, appId string, installationId string, privateKey string) *SourceControlConfigGet200ResponseDataOneOfConfigOneOf {
	this := SourceControlConfigGet200ResponseDataOneOfConfigOneOf{}
	this.Type = type_
	this.AppId = appId
	this.InstallationId = installationId
	this.PrivateKey = privateKey
	return &this
}

// NewSourceControlConfigGet200ResponseDataOneOfConfigOneOfWithDefaults instantiates a new SourceControlConfigGet200ResponseDataOneOfConfigOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceControlConfigGet200ResponseDataOneOfConfigOneOfWithDefaults() *SourceControlConfigGet200ResponseDataOneOfConfigOneOf {
	this := SourceControlConfigGet200ResponseDataOneOfConfigOneOf{}
	return &this
}

// GetType returns the Type field value
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) SetType(v string) {
	o.Type = v
}

// GetAppId returns the AppId field value
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) GetAppIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) SetAppId(v string) {
	o.AppId = v
}

// GetInstallationId returns the InstallationId field value
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) GetInstallationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstallationId
}

// GetInstallationIdOk returns a tuple with the InstallationId field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) GetInstallationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstallationId, true
}

// SetInstallationId sets field value
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) SetInstallationId(v string) {
	o.InstallationId = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) SetPrivateKey(v string) {
	o.PrivateKey = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) SetUrl(v string) {
	o.Url = &v
}

// GetEnterpriseApiUrl returns the EnterpriseApiUrl field value if set, zero value otherwise.
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) GetEnterpriseApiUrl() string {
	if o == nil || IsNil(o.EnterpriseApiUrl) {
		var ret string
		return ret
	}
	return *o.EnterpriseApiUrl
}

// GetEnterpriseApiUrlOk returns a tuple with the EnterpriseApiUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) GetEnterpriseApiUrlOk() (*string, bool) {
	if o == nil || IsNil(o.EnterpriseApiUrl) {
		return nil, false
	}
	return o.EnterpriseApiUrl, true
}

// HasEnterpriseApiUrl returns a boolean if a field has been set.
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) HasEnterpriseApiUrl() bool {
	if o != nil && !IsNil(o.EnterpriseApiUrl) {
		return true
	}

	return false
}

// SetEnterpriseApiUrl gets a reference to the given string and assigns it to the EnterpriseApiUrl field.
func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) SetEnterpriseApiUrl(v string) {
	o.EnterpriseApiUrl = &v
}

func (o SourceControlConfigGet200ResponseDataOneOfConfigOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceControlConfigGet200ResponseDataOneOfConfigOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["app_id"] = o.AppId
	toSerialize["installation_id"] = o.InstallationId
	toSerialize["private_key"] = o.PrivateKey
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.EnterpriseApiUrl) {
		toSerialize["enterprise_api_url"] = o.EnterpriseApiUrl
	}
	return toSerialize, nil
}

func (o *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"app_id",
		"installation_id",
		"private_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceControlConfigGet200ResponseDataOneOfConfigOneOf := _SourceControlConfigGet200ResponseDataOneOfConfigOneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSourceControlConfigGet200ResponseDataOneOfConfigOneOf)

	if err != nil {
		return err
	}

	*o = SourceControlConfigGet200ResponseDataOneOfConfigOneOf(varSourceControlConfigGet200ResponseDataOneOfConfigOneOf)

	return err
}

type NullableSourceControlConfigGet200ResponseDataOneOfConfigOneOf struct {
	value *SourceControlConfigGet200ResponseDataOneOfConfigOneOf
	isSet bool
}

func (v NullableSourceControlConfigGet200ResponseDataOneOfConfigOneOf) Get() *SourceControlConfigGet200ResponseDataOneOfConfigOneOf {
	return v.value
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOfConfigOneOf) Set(val *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceControlConfigGet200ResponseDataOneOfConfigOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOfConfigOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceControlConfigGet200ResponseDataOneOfConfigOneOf(val *SourceControlConfigGet200ResponseDataOneOfConfigOneOf) *NullableSourceControlConfigGet200ResponseDataOneOfConfigOneOf {
	return &NullableSourceControlConfigGet200ResponseDataOneOfConfigOneOf{value: val, isSet: true}
}

func (v NullableSourceControlConfigGet200ResponseDataOneOfConfigOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOfConfigOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



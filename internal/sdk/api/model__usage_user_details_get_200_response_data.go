/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the UsageUserDetailsGet200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsageUserDetailsGet200ResponseData{}

// UsageUserDetailsGet200ResponseData struct for UsageUserDetailsGet200ResponseData
type UsageUserDetailsGet200ResponseData struct {
	OverallSummary []UsageUserDetailsGet200ResponseDataOverallSummaryInner `json:"overall_summary"`
	WeeklySummary []UsageAppDetailsGet200ResponseDataWeeklySummaryInner `json:"weekly_summary"`
	ViewerSummary []UsageUserDetailsGet200ResponseDataViewerSummaryInner `json:"viewer_summary"`
	EditorSummary []UsageUserDetailsGet200ResponseDataViewerSummaryInner `json:"editor_summary"`
	AdditionalProperties map[string]interface{}
}

type _UsageUserDetailsGet200ResponseData UsageUserDetailsGet200ResponseData

// NewUsageUserDetailsGet200ResponseData instantiates a new UsageUserDetailsGet200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsageUserDetailsGet200ResponseData(overallSummary []UsageUserDetailsGet200ResponseDataOverallSummaryInner, weeklySummary []UsageAppDetailsGet200ResponseDataWeeklySummaryInner, viewerSummary []UsageUserDetailsGet200ResponseDataViewerSummaryInner, editorSummary []UsageUserDetailsGet200ResponseDataViewerSummaryInner) *UsageUserDetailsGet200ResponseData {
	this := UsageUserDetailsGet200ResponseData{}
	this.OverallSummary = overallSummary
	this.WeeklySummary = weeklySummary
	this.ViewerSummary = viewerSummary
	this.EditorSummary = editorSummary
	return &this
}

// NewUsageUserDetailsGet200ResponseDataWithDefaults instantiates a new UsageUserDetailsGet200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsageUserDetailsGet200ResponseDataWithDefaults() *UsageUserDetailsGet200ResponseData {
	this := UsageUserDetailsGet200ResponseData{}
	return &this
}

// GetOverallSummary returns the OverallSummary field value
func (o *UsageUserDetailsGet200ResponseData) GetOverallSummary() []UsageUserDetailsGet200ResponseDataOverallSummaryInner {
	if o == nil {
		var ret []UsageUserDetailsGet200ResponseDataOverallSummaryInner
		return ret
	}

	return o.OverallSummary
}

// GetOverallSummaryOk returns a tuple with the OverallSummary field value
// and a boolean to check if the value has been set.
func (o *UsageUserDetailsGet200ResponseData) GetOverallSummaryOk() ([]UsageUserDetailsGet200ResponseDataOverallSummaryInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverallSummary, true
}

// SetOverallSummary sets field value
func (o *UsageUserDetailsGet200ResponseData) SetOverallSummary(v []UsageUserDetailsGet200ResponseDataOverallSummaryInner) {
	o.OverallSummary = v
}

// GetWeeklySummary returns the WeeklySummary field value
func (o *UsageUserDetailsGet200ResponseData) GetWeeklySummary() []UsageAppDetailsGet200ResponseDataWeeklySummaryInner {
	if o == nil {
		var ret []UsageAppDetailsGet200ResponseDataWeeklySummaryInner
		return ret
	}

	return o.WeeklySummary
}

// GetWeeklySummaryOk returns a tuple with the WeeklySummary field value
// and a boolean to check if the value has been set.
func (o *UsageUserDetailsGet200ResponseData) GetWeeklySummaryOk() ([]UsageAppDetailsGet200ResponseDataWeeklySummaryInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.WeeklySummary, true
}

// SetWeeklySummary sets field value
func (o *UsageUserDetailsGet200ResponseData) SetWeeklySummary(v []UsageAppDetailsGet200ResponseDataWeeklySummaryInner) {
	o.WeeklySummary = v
}

// GetViewerSummary returns the ViewerSummary field value
func (o *UsageUserDetailsGet200ResponseData) GetViewerSummary() []UsageUserDetailsGet200ResponseDataViewerSummaryInner {
	if o == nil {
		var ret []UsageUserDetailsGet200ResponseDataViewerSummaryInner
		return ret
	}

	return o.ViewerSummary
}

// GetViewerSummaryOk returns a tuple with the ViewerSummary field value
// and a boolean to check if the value has been set.
func (o *UsageUserDetailsGet200ResponseData) GetViewerSummaryOk() ([]UsageUserDetailsGet200ResponseDataViewerSummaryInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewerSummary, true
}

// SetViewerSummary sets field value
func (o *UsageUserDetailsGet200ResponseData) SetViewerSummary(v []UsageUserDetailsGet200ResponseDataViewerSummaryInner) {
	o.ViewerSummary = v
}

// GetEditorSummary returns the EditorSummary field value
func (o *UsageUserDetailsGet200ResponseData) GetEditorSummary() []UsageUserDetailsGet200ResponseDataViewerSummaryInner {
	if o == nil {
		var ret []UsageUserDetailsGet200ResponseDataViewerSummaryInner
		return ret
	}

	return o.EditorSummary
}

// GetEditorSummaryOk returns a tuple with the EditorSummary field value
// and a boolean to check if the value has been set.
func (o *UsageUserDetailsGet200ResponseData) GetEditorSummaryOk() ([]UsageUserDetailsGet200ResponseDataViewerSummaryInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.EditorSummary, true
}

// SetEditorSummary sets field value
func (o *UsageUserDetailsGet200ResponseData) SetEditorSummary(v []UsageUserDetailsGet200ResponseDataViewerSummaryInner) {
	o.EditorSummary = v
}

func (o UsageUserDetailsGet200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsageUserDetailsGet200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["overall_summary"] = o.OverallSummary
	toSerialize["weekly_summary"] = o.WeeklySummary
	toSerialize["viewer_summary"] = o.ViewerSummary
	toSerialize["editor_summary"] = o.EditorSummary

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UsageUserDetailsGet200ResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"overall_summary",
		"weekly_summary",
		"viewer_summary",
		"editor_summary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUsageUserDetailsGet200ResponseData := _UsageUserDetailsGet200ResponseData{}

	err = json.Unmarshal(data, &varUsageUserDetailsGet200ResponseData)

	if err != nil {
		return err
	}

	*o = UsageUserDetailsGet200ResponseData(varUsageUserDetailsGet200ResponseData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "overall_summary")
		delete(additionalProperties, "weekly_summary")
		delete(additionalProperties, "viewer_summary")
		delete(additionalProperties, "editor_summary")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUsageUserDetailsGet200ResponseData struct {
	value *UsageUserDetailsGet200ResponseData
	isSet bool
}

func (v NullableUsageUserDetailsGet200ResponseData) Get() *UsageUserDetailsGet200ResponseData {
	return v.value
}

func (v *NullableUsageUserDetailsGet200ResponseData) Set(val *UsageUserDetailsGet200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableUsageUserDetailsGet200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableUsageUserDetailsGet200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsageUserDetailsGet200ResponseData(val *UsageUserDetailsGet200ResponseData) *NullableUsageUserDetailsGet200ResponseData {
	return &NullableUsageUserDetailsGet200ResponseData{value: val, isSet: true}
}

func (v NullableUsageUserDetailsGet200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsageUserDetailsGet200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



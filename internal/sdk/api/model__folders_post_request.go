/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the FoldersPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FoldersPostRequest{}

// FoldersPostRequest struct for FoldersPostRequest
type FoldersPostRequest struct {
	// The name of the folder.
	Name string `json:"name"`
	// The ID of the parent folder.
	ParentFolderId NullableString `json:"parent_folder_id,omitempty"`
	// The type of the folder.
	FolderType string `json:"folder_type"`
	AdditionalProperties map[string]interface{}
}

type _FoldersPostRequest FoldersPostRequest

// NewFoldersPostRequest instantiates a new FoldersPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFoldersPostRequest(name string, folderType string) *FoldersPostRequest {
	this := FoldersPostRequest{}
	this.Name = name
	this.FolderType = folderType
	return &this
}

// NewFoldersPostRequestWithDefaults instantiates a new FoldersPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFoldersPostRequestWithDefaults() *FoldersPostRequest {
	this := FoldersPostRequest{}
	return &this
}

// GetName returns the Name field value
func (o *FoldersPostRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FoldersPostRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FoldersPostRequest) SetName(v string) {
	o.Name = v
}

// GetParentFolderId returns the ParentFolderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FoldersPostRequest) GetParentFolderId() string {
	if o == nil || IsNil(o.ParentFolderId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentFolderId.Get()
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FoldersPostRequest) GetParentFolderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentFolderId.Get(), o.ParentFolderId.IsSet()
}

// HasParentFolderId returns a boolean if a field has been set.
func (o *FoldersPostRequest) HasParentFolderId() bool {
	if o != nil && o.ParentFolderId.IsSet() {
		return true
	}

	return false
}

// SetParentFolderId gets a reference to the given NullableString and assigns it to the ParentFolderId field.
func (o *FoldersPostRequest) SetParentFolderId(v string) {
	o.ParentFolderId.Set(&v)
}
// SetParentFolderIdNil sets the value for ParentFolderId to be an explicit nil
func (o *FoldersPostRequest) SetParentFolderIdNil() {
	o.ParentFolderId.Set(nil)
}

// UnsetParentFolderId ensures that no value is present for ParentFolderId, not even an explicit nil
func (o *FoldersPostRequest) UnsetParentFolderId() {
	o.ParentFolderId.Unset()
}

// GetFolderType returns the FolderType field value
func (o *FoldersPostRequest) GetFolderType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FolderType
}

// GetFolderTypeOk returns a tuple with the FolderType field value
// and a boolean to check if the value has been set.
func (o *FoldersPostRequest) GetFolderTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FolderType, true
}

// SetFolderType sets field value
func (o *FoldersPostRequest) SetFolderType(v string) {
	o.FolderType = v
}

func (o FoldersPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FoldersPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.ParentFolderId.IsSet() {
		toSerialize["parent_folder_id"] = o.ParentFolderId.Get()
	}
	toSerialize["folder_type"] = o.FolderType

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FoldersPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"folder_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFoldersPostRequest := _FoldersPostRequest{}

	err = json.Unmarshal(data, &varFoldersPostRequest)

	if err != nil {
		return err
	}

	*o = FoldersPostRequest(varFoldersPostRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "parent_folder_id")
		delete(additionalProperties, "folder_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFoldersPostRequest struct {
	value *FoldersPostRequest
	isSet bool
}

func (v NullableFoldersPostRequest) Get() *FoldersPostRequest {
	return v.value
}

func (v *NullableFoldersPostRequest) Set(val *FoldersPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFoldersPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFoldersPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFoldersPostRequest(val *FoldersPostRequest) *NullableFoldersPostRequest {
	return &NullableFoldersPostRequest{value: val, isSet: true}
}

func (v NullableFoldersPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFoldersPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



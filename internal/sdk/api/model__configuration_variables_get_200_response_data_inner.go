/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the ConfigurationVariablesGet200ResponseDataInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigurationVariablesGet200ResponseDataInner{}

// ConfigurationVariablesGet200ResponseDataInner struct for ConfigurationVariablesGet200ResponseDataInner
type ConfigurationVariablesGet200ResponseDataInner struct {
	// The ID of the configuration variable
	Id string `json:"id"`
	// The name of the configuration variable
	Name string `json:"name"`
	// The description of the configuration variable
	Description *string `json:"description,omitempty"`
	// Whether the configuration variable is a secret
	Secret bool `json:"secret"`
	Values []ConfigurationVariablesGet200ResponseDataInnerValuesInner `json:"values"`
	AdditionalProperties map[string]interface{}
}

type _ConfigurationVariablesGet200ResponseDataInner ConfigurationVariablesGet200ResponseDataInner

// NewConfigurationVariablesGet200ResponseDataInner instantiates a new ConfigurationVariablesGet200ResponseDataInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigurationVariablesGet200ResponseDataInner(id string, name string, secret bool, values []ConfigurationVariablesGet200ResponseDataInnerValuesInner) *ConfigurationVariablesGet200ResponseDataInner {
	this := ConfigurationVariablesGet200ResponseDataInner{}
	this.Id = id
	this.Name = name
	this.Secret = secret
	this.Values = values
	return &this
}

// NewConfigurationVariablesGet200ResponseDataInnerWithDefaults instantiates a new ConfigurationVariablesGet200ResponseDataInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigurationVariablesGet200ResponseDataInnerWithDefaults() *ConfigurationVariablesGet200ResponseDataInner {
	this := ConfigurationVariablesGet200ResponseDataInner{}
	return &this
}

// GetId returns the Id field value
func (o *ConfigurationVariablesGet200ResponseDataInner) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConfigurationVariablesGet200ResponseDataInner) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConfigurationVariablesGet200ResponseDataInner) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ConfigurationVariablesGet200ResponseDataInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConfigurationVariablesGet200ResponseDataInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConfigurationVariablesGet200ResponseDataInner) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConfigurationVariablesGet200ResponseDataInner) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigurationVariablesGet200ResponseDataInner) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConfigurationVariablesGet200ResponseDataInner) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConfigurationVariablesGet200ResponseDataInner) SetDescription(v string) {
	o.Description = &v
}

// GetSecret returns the Secret field value
func (o *ConfigurationVariablesGet200ResponseDataInner) GetSecret() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *ConfigurationVariablesGet200ResponseDataInner) GetSecretOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *ConfigurationVariablesGet200ResponseDataInner) SetSecret(v bool) {
	o.Secret = v
}

// GetValues returns the Values field value
func (o *ConfigurationVariablesGet200ResponseDataInner) GetValues() []ConfigurationVariablesGet200ResponseDataInnerValuesInner {
	if o == nil {
		var ret []ConfigurationVariablesGet200ResponseDataInnerValuesInner
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *ConfigurationVariablesGet200ResponseDataInner) GetValuesOk() ([]ConfigurationVariablesGet200ResponseDataInnerValuesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *ConfigurationVariablesGet200ResponseDataInner) SetValues(v []ConfigurationVariablesGet200ResponseDataInnerValuesInner) {
	o.Values = v
}

func (o ConfigurationVariablesGet200ResponseDataInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigurationVariablesGet200ResponseDataInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["secret"] = o.Secret
	toSerialize["values"] = o.Values

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConfigurationVariablesGet200ResponseDataInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"secret",
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConfigurationVariablesGet200ResponseDataInner := _ConfigurationVariablesGet200ResponseDataInner{}

	err = json.Unmarshal(data, &varConfigurationVariablesGet200ResponseDataInner)

	if err != nil {
		return err
	}

	*o = ConfigurationVariablesGet200ResponseDataInner(varConfigurationVariablesGet200ResponseDataInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "secret")
		delete(additionalProperties, "values")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConfigurationVariablesGet200ResponseDataInner struct {
	value *ConfigurationVariablesGet200ResponseDataInner
	isSet bool
}

func (v NullableConfigurationVariablesGet200ResponseDataInner) Get() *ConfigurationVariablesGet200ResponseDataInner {
	return v.value
}

func (v *NullableConfigurationVariablesGet200ResponseDataInner) Set(val *ConfigurationVariablesGet200ResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigurationVariablesGet200ResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigurationVariablesGet200ResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigurationVariablesGet200ResponseDataInner(val *ConfigurationVariablesGet200ResponseDataInner) *NullableConfigurationVariablesGet200ResponseDataInner {
	return &NullableConfigurationVariablesGet200ResponseDataInner{value: val, isSet: true}
}

func (v NullableConfigurationVariablesGet200ResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigurationVariablesGet200ResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObservabilityConfigConfigIdPut200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservabilityConfigConfigIdPut200ResponseData{}

// ObservabilityConfigConfigIdPut200ResponseData Shape of Put Observability Config Response
type ObservabilityConfigConfigIdPut200ResponseData struct {
	// The id of the configuration.
	Id string `json:"id"`
	Config ObservabilityConfigGet200ResponseDataInnerConfig `json:"config"`
	// When enabled, use this provider for apps observability monitoring.
	Enabled bool `json:"enabled"`
}

type _ObservabilityConfigConfigIdPut200ResponseData ObservabilityConfigConfigIdPut200ResponseData

// NewObservabilityConfigConfigIdPut200ResponseData instantiates a new ObservabilityConfigConfigIdPut200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservabilityConfigConfigIdPut200ResponseData(id string, config ObservabilityConfigGet200ResponseDataInnerConfig, enabled bool) *ObservabilityConfigConfigIdPut200ResponseData {
	this := ObservabilityConfigConfigIdPut200ResponseData{}
	this.Id = id
	this.Config = config
	this.Enabled = enabled
	return &this
}

// NewObservabilityConfigConfigIdPut200ResponseDataWithDefaults instantiates a new ObservabilityConfigConfigIdPut200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservabilityConfigConfigIdPut200ResponseDataWithDefaults() *ObservabilityConfigConfigIdPut200ResponseData {
	this := ObservabilityConfigConfigIdPut200ResponseData{}
	return &this
}

// GetId returns the Id field value
func (o *ObservabilityConfigConfigIdPut200ResponseData) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ObservabilityConfigConfigIdPut200ResponseData) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ObservabilityConfigConfigIdPut200ResponseData) SetId(v string) {
	o.Id = v
}

// GetConfig returns the Config field value
func (o *ObservabilityConfigConfigIdPut200ResponseData) GetConfig() ObservabilityConfigGet200ResponseDataInnerConfig {
	if o == nil {
		var ret ObservabilityConfigGet200ResponseDataInnerConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *ObservabilityConfigConfigIdPut200ResponseData) GetConfigOk() (*ObservabilityConfigGet200ResponseDataInnerConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *ObservabilityConfigConfigIdPut200ResponseData) SetConfig(v ObservabilityConfigGet200ResponseDataInnerConfig) {
	o.Config = v
}

// GetEnabled returns the Enabled field value
func (o *ObservabilityConfigConfigIdPut200ResponseData) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ObservabilityConfigConfigIdPut200ResponseData) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ObservabilityConfigConfigIdPut200ResponseData) SetEnabled(v bool) {
	o.Enabled = v
}

func (o ObservabilityConfigConfigIdPut200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservabilityConfigConfigIdPut200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["config"] = o.Config
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

func (o *ObservabilityConfigConfigIdPut200ResponseData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"config",
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObservabilityConfigConfigIdPut200ResponseData := _ObservabilityConfigConfigIdPut200ResponseData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObservabilityConfigConfigIdPut200ResponseData)

	if err != nil {
		return err
	}

	*o = ObservabilityConfigConfigIdPut200ResponseData(varObservabilityConfigConfigIdPut200ResponseData)

	return err
}

type NullableObservabilityConfigConfigIdPut200ResponseData struct {
	value *ObservabilityConfigConfigIdPut200ResponseData
	isSet bool
}

func (v NullableObservabilityConfigConfigIdPut200ResponseData) Get() *ObservabilityConfigConfigIdPut200ResponseData {
	return v.value
}

func (v *NullableObservabilityConfigConfigIdPut200ResponseData) Set(val *ObservabilityConfigConfigIdPut200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableObservabilityConfigConfigIdPut200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableObservabilityConfigConfigIdPut200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservabilityConfigConfigIdPut200ResponseData(val *ObservabilityConfigConfigIdPut200ResponseData) *NullableObservabilityConfigConfigIdPut200ResponseData {
	return &NullableObservabilityConfigConfigIdPut200ResponseData{value: val, isSet: true}
}

func (v NullableObservabilityConfigConfigIdPut200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservabilityConfigConfigIdPut200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



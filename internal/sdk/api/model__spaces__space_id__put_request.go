/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// checks if the SpacesSpaceIdPutRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SpacesSpaceIdPutRequest{}

// SpacesSpaceIdPutRequest struct for SpacesSpaceIdPutRequest
type SpacesSpaceIdPutRequest struct {
	// The name of the space.
	Name string `json:"name"`
	// The domain of the space. On Retool Cloud, specify subdomain of the space instead.
	Domain string `json:"domain"`
	AdditionalProperties map[string]interface{}
}

type _SpacesSpaceIdPutRequest SpacesSpaceIdPutRequest

// NewSpacesSpaceIdPutRequest instantiates a new SpacesSpaceIdPutRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpacesSpaceIdPutRequest(name string, domain string) *SpacesSpaceIdPutRequest {
	this := SpacesSpaceIdPutRequest{}
	this.Name = name
	this.Domain = domain
	return &this
}

// NewSpacesSpaceIdPutRequestWithDefaults instantiates a new SpacesSpaceIdPutRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpacesSpaceIdPutRequestWithDefaults() *SpacesSpaceIdPutRequest {
	this := SpacesSpaceIdPutRequest{}
	return &this
}

// GetName returns the Name field value
func (o *SpacesSpaceIdPutRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SpacesSpaceIdPutRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SpacesSpaceIdPutRequest) SetName(v string) {
	o.Name = v
}

// GetDomain returns the Domain field value
func (o *SpacesSpaceIdPutRequest) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *SpacesSpaceIdPutRequest) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *SpacesSpaceIdPutRequest) SetDomain(v string) {
	o.Domain = v
}

func (o SpacesSpaceIdPutRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SpacesSpaceIdPutRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["domain"] = o.Domain

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SpacesSpaceIdPutRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"domain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSpacesSpaceIdPutRequest := _SpacesSpaceIdPutRequest{}

	err = json.Unmarshal(data, &varSpacesSpaceIdPutRequest)

	if err != nil {
		return err
	}

	*o = SpacesSpaceIdPutRequest(varSpacesSpaceIdPutRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "domain")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSpacesSpaceIdPutRequest struct {
	value *SpacesSpaceIdPutRequest
	isSet bool
}

func (v NullableSpacesSpaceIdPutRequest) Get() *SpacesSpaceIdPutRequest {
	return v.value
}

func (v *NullableSpacesSpaceIdPutRequest) Set(val *SpacesSpaceIdPutRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSpacesSpaceIdPutRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSpacesSpaceIdPutRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpacesSpaceIdPutRequest(val *SpacesSpaceIdPutRequest) *NullableSpacesSpaceIdPutRequest {
	return &NullableSpacesSpaceIdPutRequest{value: val, isSet: true}
}

func (v NullableSpacesSpaceIdPutRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpacesSpaceIdPutRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SourceControlConfigGet200ResponseDataOneOf2Config type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceControlConfigGet200ResponseDataOneOf2Config{}

// SourceControlConfigGet200ResponseDataOneOf2Config struct for SourceControlConfigGet200ResponseDataOneOf2Config
type SourceControlConfigGet200ResponseDataOneOf2Config struct {
	// The domain used to access your self-hosted AWS CodeCommit instance.
	Url string `json:"url"`
	// The region of the CodeCommit repository.
	Region string `json:"region"`
	// The Access key ID from your AWSCodeCommitFullAccess policy.
	AccessKeyId string `json:"access_key_id"`
	// The Secret Access Key from your AWSCodeCommitFullAccess policy
	SecretAccessKey string `json:"secret_access_key"`
	// The HTTPS username from your security credentials.
	HttpsUsername string `json:"https_username"`
	// The HTTPS password from your security credentials.
	HttpsPassword string `json:"https_password"`
}

type _SourceControlConfigGet200ResponseDataOneOf2Config SourceControlConfigGet200ResponseDataOneOf2Config

// NewSourceControlConfigGet200ResponseDataOneOf2Config instantiates a new SourceControlConfigGet200ResponseDataOneOf2Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceControlConfigGet200ResponseDataOneOf2Config(url string, region string, accessKeyId string, secretAccessKey string, httpsUsername string, httpsPassword string) *SourceControlConfigGet200ResponseDataOneOf2Config {
	this := SourceControlConfigGet200ResponseDataOneOf2Config{}
	this.Url = url
	this.Region = region
	this.AccessKeyId = accessKeyId
	this.SecretAccessKey = secretAccessKey
	this.HttpsUsername = httpsUsername
	this.HttpsPassword = httpsPassword
	return &this
}

// NewSourceControlConfigGet200ResponseDataOneOf2ConfigWithDefaults instantiates a new SourceControlConfigGet200ResponseDataOneOf2Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceControlConfigGet200ResponseDataOneOf2ConfigWithDefaults() *SourceControlConfigGet200ResponseDataOneOf2Config {
	this := SourceControlConfigGet200ResponseDataOneOf2Config{}
	return &this
}

// GetUrl returns the Url field value
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) SetUrl(v string) {
	o.Url = v
}

// GetRegion returns the Region field value
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) SetRegion(v string) {
	o.Region = v
}

// GetAccessKeyId returns the AccessKeyId field value
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) GetAccessKeyId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccessKeyId
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) GetAccessKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessKeyId, true
}

// SetAccessKeyId sets field value
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) SetAccessKeyId(v string) {
	o.AccessKeyId = v
}

// GetSecretAccessKey returns the SecretAccessKey field value
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) GetSecretAccessKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretAccessKey
}

// GetSecretAccessKeyOk returns a tuple with the SecretAccessKey field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) GetSecretAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SecretAccessKey, true
}

// SetSecretAccessKey sets field value
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) SetSecretAccessKey(v string) {
	o.SecretAccessKey = v
}

// GetHttpsUsername returns the HttpsUsername field value
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) GetHttpsUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HttpsUsername
}

// GetHttpsUsernameOk returns a tuple with the HttpsUsername field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) GetHttpsUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpsUsername, true
}

// SetHttpsUsername sets field value
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) SetHttpsUsername(v string) {
	o.HttpsUsername = v
}

// GetHttpsPassword returns the HttpsPassword field value
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) GetHttpsPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HttpsPassword
}

// GetHttpsPasswordOk returns a tuple with the HttpsPassword field value
// and a boolean to check if the value has been set.
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) GetHttpsPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HttpsPassword, true
}

// SetHttpsPassword sets field value
func (o *SourceControlConfigGet200ResponseDataOneOf2Config) SetHttpsPassword(v string) {
	o.HttpsPassword = v
}

func (o SourceControlConfigGet200ResponseDataOneOf2Config) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceControlConfigGet200ResponseDataOneOf2Config) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["region"] = o.Region
	toSerialize["access_key_id"] = o.AccessKeyId
	toSerialize["secret_access_key"] = o.SecretAccessKey
	toSerialize["https_username"] = o.HttpsUsername
	toSerialize["https_password"] = o.HttpsPassword
	return toSerialize, nil
}

func (o *SourceControlConfigGet200ResponseDataOneOf2Config) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"region",
		"access_key_id",
		"secret_access_key",
		"https_username",
		"https_password",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceControlConfigGet200ResponseDataOneOf2Config := _SourceControlConfigGet200ResponseDataOneOf2Config{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSourceControlConfigGet200ResponseDataOneOf2Config)

	if err != nil {
		return err
	}

	*o = SourceControlConfigGet200ResponseDataOneOf2Config(varSourceControlConfigGet200ResponseDataOneOf2Config)

	return err
}

type NullableSourceControlConfigGet200ResponseDataOneOf2Config struct {
	value *SourceControlConfigGet200ResponseDataOneOf2Config
	isSet bool
}

func (v NullableSourceControlConfigGet200ResponseDataOneOf2Config) Get() *SourceControlConfigGet200ResponseDataOneOf2Config {
	return v.value
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOf2Config) Set(val *SourceControlConfigGet200ResponseDataOneOf2Config) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceControlConfigGet200ResponseDataOneOf2Config) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOf2Config) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceControlConfigGet200ResponseDataOneOf2Config(val *SourceControlConfigGet200ResponseDataOneOf2Config) *NullableSourceControlConfigGet200ResponseDataOneOf2Config {
	return &NullableSourceControlConfigGet200ResponseDataOneOf2Config{value: val, isSet: true}
}

func (v NullableSourceControlConfigGet200ResponseDataOneOf2Config) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceControlConfigGet200ResponseDataOneOf2Config) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



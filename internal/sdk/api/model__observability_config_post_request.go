/*
Retool API

Go to Settings > API to get started. Once you generate an API token, use bearer token authentication to make requests.

API version: 2.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObservabilityConfigPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservabilityConfigPostRequest{}

// ObservabilityConfigPostRequest Shape of Post Observability Config Request
type ObservabilityConfigPostRequest struct {
	Config ObservabilityConfigGet200ResponseDataInnerConfig `json:"config"`
	// When enabled, use this provider for apps observability monitoring.
	Enabled bool `json:"enabled"`
}

type _ObservabilityConfigPostRequest ObservabilityConfigPostRequest

// NewObservabilityConfigPostRequest instantiates a new ObservabilityConfigPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservabilityConfigPostRequest(config ObservabilityConfigGet200ResponseDataInnerConfig, enabled bool) *ObservabilityConfigPostRequest {
	this := ObservabilityConfigPostRequest{}
	this.Config = config
	this.Enabled = enabled
	return &this
}

// NewObservabilityConfigPostRequestWithDefaults instantiates a new ObservabilityConfigPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservabilityConfigPostRequestWithDefaults() *ObservabilityConfigPostRequest {
	this := ObservabilityConfigPostRequest{}
	return &this
}

// GetConfig returns the Config field value
func (o *ObservabilityConfigPostRequest) GetConfig() ObservabilityConfigGet200ResponseDataInnerConfig {
	if o == nil {
		var ret ObservabilityConfigGet200ResponseDataInnerConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *ObservabilityConfigPostRequest) GetConfigOk() (*ObservabilityConfigGet200ResponseDataInnerConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *ObservabilityConfigPostRequest) SetConfig(v ObservabilityConfigGet200ResponseDataInnerConfig) {
	o.Config = v
}

// GetEnabled returns the Enabled field value
func (o *ObservabilityConfigPostRequest) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ObservabilityConfigPostRequest) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ObservabilityConfigPostRequest) SetEnabled(v bool) {
	o.Enabled = v
}

func (o ObservabilityConfigPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservabilityConfigPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config"] = o.Config
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

func (o *ObservabilityConfigPostRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"config",
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObservabilityConfigPostRequest := _ObservabilityConfigPostRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObservabilityConfigPostRequest)

	if err != nil {
		return err
	}

	*o = ObservabilityConfigPostRequest(varObservabilityConfigPostRequest)

	return err
}

type NullableObservabilityConfigPostRequest struct {
	value *ObservabilityConfigPostRequest
	isSet bool
}

func (v NullableObservabilityConfigPostRequest) Get() *ObservabilityConfigPostRequest {
	return v.value
}

func (v *NullableObservabilityConfigPostRequest) Set(val *ObservabilityConfigPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableObservabilityConfigPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableObservabilityConfigPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservabilityConfigPostRequest(val *ObservabilityConfigPostRequest) *NullableObservabilityConfigPostRequest {
	return &NullableObservabilityConfigPostRequest{value: val, isSet: true}
}

func (v NullableObservabilityConfigPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservabilityConfigPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


